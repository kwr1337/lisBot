import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from database.models import get_db
from states.user_states import UserStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
from aiogram.fsm.state import State, StatesGroup
import re
import logging
from aiogram.exceptions import TelegramBadRequest
import io

logging.basicConfig(level=logging.DEBUG)

router = Router()

class RegistrationStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_fullname = State()

class BookStates(StatesGroup):
    waiting_for_days = State() 
    waiting_for_extend_days = State()  

class SuggestBookStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_url = State()
    waiting_for_price = State()
    waiting_for_reason = State()

class ReviewStates(StatesGroup):
    waiting_for_rating = State()
    waiting_for_text = State()

BOOKS_PER_PAGE = 5
MAX_BOOKS_PER_USER = 10

def validate_phone(phone: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return bool(re.match(r'^7\d{10}$', phone))

def get_main_keyboard():
    keyboard = [
        [
            types.KeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥"),
            types.KeyboardButton(text="üìö –ú–æ–∏ –∫–Ω–∏–≥–∏")
        ],
        [
            types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫"),
            types.KeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã")
        ],
        [
            types.KeyboardButton(text="üìñ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É"),
            types.KeyboardButton(text="‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        ]
    ]
    
    return types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        is_persistent=True
    )

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,))
            user = cursor.fetchone()
            
            if not user:
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXXX"
                )
                await state.set_state(RegistrationStates.waiting_for_phone)
            else:
                await message.answer(
                    "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.",
                    reply_markup=get_main_keyboard()
                )
                
    except Exception as e:
        logging.error(f"Error in cmd_start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("menu"))
async def cmd_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not (phone.startswith('+7') and len(phone) == 12 and phone[1:].isdigit()):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7XXXXXXXXXX")
        return
        
    await state.update_data(phone=phone)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)")
    await state.set_state(RegistrationStates.waiting_for_fullname)

@router.message(RegistrationStates.waiting_for_fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    
    if len(full_name.split()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò–º—è)")
        return
        
    user_data = await state.get_data()
    
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO users (id, username, full_name, phone)
                VALUES (?, ?, ?, ?)
            """, (
                message.from_user.id,
                message.from_user.username,
                full_name,
                user_data['phone']
            ))
            conn.commit()
            
        await state.clear()
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logging.error(f"Error in process_fullname: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_registration(message: types.Message) -> bool:
    try:
        with get_db() as conn:  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,))
            result = cursor.fetchone()
            
            if not result:
                await message.answer(
                    "‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                    "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return False
            return True
            
    except Exception as e:
        logging.error(f"Error checking registration: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return False

@router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_command(message: types.Message):
    await show_catalog(message)

@router.callback_query(lambda c: c.data.startswith("catalog:"))
async def process_catalog_navigation(callback: types.CallbackQuery):
    try:
        page = int(callback.data.split(":")[1])
        await show_catalog(callback.message, page)
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in catalog navigation: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

async def show_catalog(message: types.Message, page: int = 1):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM books")
            total_books = cursor.fetchone()[0]
            total_pages = (total_books + BOOKS_PER_PAGE - 1) // BOOKS_PER_PAGE
            
            cursor.execute("""
                SELECT id, title, author, description 
                FROM books 
                ORDER BY title
                LIMIT ? OFFSET ?
            """, (BOOKS_PER_PAGE, (page - 1) * BOOKS_PER_PAGE))
            
            books = cursor.fetchall()
            
            if not books:
                await message.answer("–í –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥")
                return
                
            text = f"üìö –ö–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages})"
            kb = InlineKeyboardBuilder()
            
            for book_id, title, author, description in books:
                kb.button(
                    text=f"{title} - {author}",
                    callback_data=f"book_info:{book_id}"
                )
            
            nav_buttons = []
            if page > 1:
                nav_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"catalog:{page-1}"))
            if page < total_pages:
                nav_buttons.append(("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", f"catalog:{page+1}"))
            
            for btn_text, btn_data in nav_buttons:
                kb.button(text=btn_text, callback_data=btn_data)
            
            kb.adjust(1)
            
            if isinstance(message, types.Message):
                await message.answer(text, reply_markup=kb.as_markup())
            else:
                await message.edit_text(text, reply_markup=kb.as_markup())
            
    except Exception as e:
        logging.error(f"Error showing catalog: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.")

@router.callback_query(F.data.startswith("book_info:"))
async def show_book_info(callback: types.CallbackQuery):
    try:
        book_id = int(callback.data.split(":")[1])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö) –∫–æ–ø–∏–π
            cursor.execute("""
                SELECT COUNT(*) 
                FROM book_copies bc
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id AND bb.status IN ('booked', 'borrowed')
                WHERE bc.book_id = ? AND bc.status != 'written_off' AND bb.id IS NULL
            """, (book_id,))
            
            available_copies = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT COUNT(*) 
                FROM borrowed_books 
                WHERE user_id = ? AND status IN ('booked', 'borrowed')
            """, (callback.from_user.id,))
            user_books_count = cursor.fetchone()[0]
            
            cursor.execute("""
                SELECT 
                    b.title,
                    b.author,
                    b.description,
                    COUNT(DISTINCT bc.id) as total_copies,
                    COUNT(DISTINCT CASE WHEN bb.status IN ('booked', 'borrowed') THEN bc.id END) as busy_copies,
                    COALESCE(AVG(r.rating), 0) as avg_rating,
                    COUNT(DISTINCT r.id) as review_count
                FROM books b
                LEFT JOIN book_copies bc ON b.id = bc.book_id
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id AND bb.status IN ('booked', 'borrowed')
                LEFT JOIN book_reviews r ON b.id = r.book_id
                WHERE b.id = ?
                GROUP BY b.id
            """, (book_id,))
            
            book = cursor.fetchone()
            if not book:
                await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
                
            title, author, description, total_copies, busy_copies, avg_rating, review_count = book
            available_copies = total_copies - busy_copies
            
            text = (
                f"üìñ <b>{title}</b>\n"
                f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {author}\n\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {total_copies}\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å: {available_copies}\n"
                f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}/5 ({review_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
            )
            
            # if available_copies > 0 and user_books_count < MAX_BOOKS_PER_USER:
            #     text += "\n‚ùóÔ∏è –£ –≤–∞—Å –µ—Å—Ç—å —ç—Ç–∞ –∫–Ω–∏–≥–∞"
            if user_books_count >= MAX_BOOKS_PER_USER:
                text += f"\n‚ùóÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–Ω–∏–≥ ({MAX_BOOKS_PER_USER})"
            
            kb = InlineKeyboardBuilder()
            
            if available_copies > 0 and user_books_count < MAX_BOOKS_PER_USER:
                kb.button(
                    text="üìù –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"borrow_{book_id}"
                )
            
            kb.button(
                text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤",
                callback_data=f"write_review:{book_id}"
            )
            
            kb.button(
                text="üí¨ –û—Ç–∑—ã–≤—ã",
                callback_data=f"reviews:{book_id}"
            )
            
            kb.button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É",
                callback_data="back_to_catalog"
            )
            
            kb.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logging.error(f"Error in show_book_info: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ", show_alert=True)

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog(callback: types.CallbackQuery):
    await callback.message.delete()
    await show_catalog(callback.message)

@router.callback_query(F.data.startswith("reviews:"))
async def show_book_reviews(callback: types.CallbackQuery):
    try:
        book_id = callback.data.split(":")[1]
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT title, author
                FROM books
                WHERE id = ?
            """, (book_id,))
            
            book = cursor.fetchone()
            if not book:
                await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
                
            title, author = book
            
            cursor.execute("""
                SELECT 
                    u.full_name,
                    r.rating,
                    r.review_text,
                    r.created_at
                FROM book_reviews r
                JOIN users u ON r.user_id = u.id
                WHERE r.book_id = ?
                ORDER BY r.created_at DESC
            """, (book_id,))
            
            reviews = cursor.fetchall()
            
            text = f"üìñ –û—Ç–∑—ã–≤—ã –æ –∫–Ω–∏–≥–µ\n<b>{title}</b>\n‚úçÔ∏è {author}\n\n"
            
            if not reviews:
                text += "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –æ –∫–Ω–∏–≥–µ."
            else:
                for review in reviews:
                    name, rating, review_text, date = review
                    stars = "‚≠êÔ∏è" * rating
                    text += (
                        f"üë§ {name}\n"
                        f"{stars}\n"
                        f"{review_text}\n"
                        f"üìÖ {date}\n\n"
                    )
            
            kb = InlineKeyboardBuilder()
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_catalog")
            
            await callback.message.edit_text(
                text,
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logging.error(f"Error in show_book_reviews: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

@router.callback_query(F.data.startswith("borrow_"))
async def process_borrow(callback: types.CallbackQuery):
    try:
        book_id = int(callback.data.split("_")[1])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–Ω–µ —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö) –∫–æ–ø–∏–π –∫–Ω–∏–≥–∏
            cursor.execute("""
                SELECT COUNT(*) 
                FROM book_copies bc
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id 
                    AND bb.status IN ('borrowed', 'booked')
                WHERE bc.book_id = ? 
                    AND bc.status != 'written_off'
                    AND bb.id IS NULL
            """, (book_id,))
            
            available_copies = cursor.fetchone()[0]
            
            if available_copies == 0:
                await callback.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–æ–ø–∏—é
            cursor.execute("""
                SELECT bc.id
                FROM book_copies bc
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id 
                    AND bb.status IN ('borrowed', 'booked')
                WHERE bc.book_id = ? 
                    AND bc.status != 'written_off'
                    AND bb.id IS NULL
                LIMIT 1
            """, (book_id,))
            
            copy_id = cursor.fetchone()[0]
            
            # –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω—å
            cursor.execute("""
                INSERT INTO borrowed_books (user_id, copy_id, book_id, status, borrow_date)
                VALUES (?, ?, ?, 'booked', datetime('now'))
            """, (callback.from_user.id, copy_id, book_id))
            
            conn.commit()
            
            await callback.answer("‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error in process_borrow: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("extend:"))
async def handle_extend_request(callback: types.CallbackQuery):
    try:
        borrow_id = callback.data.split(":")[1]
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT 
                    datetime(return_date) as return_date,
                    COALESCE(extended, 0) as extended
                FROM borrowed_books 
                WHERE id = ? AND status = 'borrowed'
            """, (borrow_id,))
            
            result = cursor.fetchone()
            if not result:
                await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∞", show_alert=True)
                return
                
            return_date, extended = result
            
            if extended:
                await callback.answer(
                    "–ö–Ω–∏–≥–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", 
                    show_alert=True
                )
                return
            
            kb = InlineKeyboardBuilder()
            kb.button(text="7 –¥–Ω–µ–π", callback_data=f"extend_confirm:{borrow_id}:7")
            kb.button(text="14 –¥–Ω–µ–π", callback_data=f"extend_confirm:{borrow_id}:14")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_extend")
            kb.adjust(2, 1)
            
            await callback.message.edit_text(
                "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ–¥–ª–∏—Ç—å –∫–Ω–∏–≥—É?\n"
                "‚ö†Ô∏è –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.",
                reply_markup=kb.as_markup()
            )
            
    except Exception as e:
        logging.error(f"Error in handle_extend_request: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("extend_confirm:"))
async def process_extend_days(callback: types.CallbackQuery):
    try:
        _, borrow_id, days = callback.data.split(":")
        days = int(days)
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT 
                    datetime(return_date) as return_date,
                    COALESCE(extended, 0) as extended
                FROM borrowed_books 
                WHERE id = ? AND status = 'borrowed'
            """, (borrow_id,))
            
            result = cursor.fetchone()
            if not result:
                await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∞", show_alert=True)
                return
                
            current_return_date, extended = result
            
            if extended:
                await callback.answer(
                    "–ö–Ω–∏–≥–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", 
                    show_alert=True
                )
                return
            
            # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
            current_return_datetime = datetime.strptime(current_return_date, '%Y-%m-%d %H:%M:%S')
            new_return_date = current_return_datetime + timedelta(days=days)
            
            cursor.execute("""
                UPDATE borrowed_books 
                SET return_date = datetime(?, 'localtime'),
                    extended = 1
                WHERE id = ? AND status = 'borrowed'
            """, (new_return_date.strftime("%Y-%m-%d %H:%M:%S"), borrow_id))
            
            conn.commit()
            
            await callback.answer(f"‚úÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π!", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
            await show_my_books(callback.message)
            
    except Exception as e:
        logging.error(f"Error in process_extend_days: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞", show_alert=True)

@router.callback_query(F.data == "cancel_extend")
async def cancel_extend(callback: types.CallbackQuery):
    await show_my_books(callback.message)
    await callback.answer("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data.startswith("cancel_booking:"))
async def cancel_booking(callback: types.CallbackQuery):
    try:
        borrow_id = callback.data.split(":")[1]
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–æ–Ω—å
            cursor.execute("""
                SELECT b.title, bc.id
                FROM borrowed_books bb
                JOIN book_copies bc ON bb.copy_id = bc.id
                JOIN books b ON bc.book_id = b.id
                WHERE bb.id = ? AND bb.status = 'booked'
            """, (borrow_id,))
            
            result = cursor.fetchone()
            if not result:
                await callback.answer("–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
                return
                
            title, copy_id = result
            
            # –û—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω—å
            cursor.execute("""
                UPDATE borrowed_books 
                SET status = 'cancelled' 
                WHERE id = ? AND status = 'booked'
            """, (borrow_id,))
            
            cursor.execute("""
                UPDATE book_copies 
                SET status = 'available' 
                WHERE id = ?
            """, (copy_id,))
            
            conn.commit()
            
            await callback.answer(f"‚úÖ –ë—Ä–æ–Ω—å –∫–Ω–∏–≥–∏ '{title}' –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
            await show_my_books(callback.message)
            
    except Exception as e:
        logging.error(f"Error in cancel_booking: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏", show_alert=True)

@router.message(F.text == "üìö –ú–æ–∏ –∫–Ω–∏–≥–∏")
async def show_my_books(message: types.Message):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT 
                    b.title,
                    b.author,
                    bb.status,
                    COALESCE(datetime(bb.return_date), '2000-01-01 00:00:00') as return_date,
                    COALESCE(datetime(bb.borrow_date), '2000-01-01 00:00:00') as borrow_date,
                    bc.id as copy_id,
                    bb.id as borrow_id
                FROM borrowed_books bb
                JOIN book_copies bc ON bb.copy_id = bc.id
                JOIN books b ON bc.book_id = b.id
                WHERE bb.user_id = ? AND bb.status IN ('borrowed', 'booked')
                ORDER BY bb.return_date
            """, (message.from_user.id,))
            
            books = cursor.fetchall()
            
            if not books:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ –Ω–∞ —Ä—É–∫–∞—Ö –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥")
                return
                
            text = "üìö –í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n"
            kb = InlineKeyboardBuilder()
            
            borrowed = []
            booked = []
            
            for book in books:
                title, author, status, return_date, borrow_date, copy_id, borrow_id = book
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                formatted_return = datetime.strptime(return_date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
                formatted_borrow = datetime.strptime(borrow_date, "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y")
                
                if status == 'borrowed':
                    book_info = (
                        f"üìñ {title}\n"
                        f"‚úçÔ∏è {author}\n"
                        f"üî¢ ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {copy_id}\n"
                        f"üìÖ –í–∑—è—Ç–∞: {formatted_borrow}\n"
                        f"üìÖ –í–µ—Ä–Ω—É—Ç—å –¥–æ: {formatted_return}\n"
                    )
                    borrowed.append(book_info)
                    kb.button(
                        text=f"üïí –ü—Ä–æ–¥–ª–∏—Ç—å: {title}",
                        callback_data=f"extend:{borrow_id}"
                    )
                else:
                    book_info = (
                        f"üìñ {title}\n"
                        f"‚úçÔ∏è {author}\n"
                        f"üî¢ ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {copy_id}\n"
                        f"üìÖ –î–∞—Ç–∞ –±—Ä–æ–Ω–∏: {formatted_borrow}\n"
                    )
                    booked.append(book_info)
                    kb.button(
                        text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å: {title}",
                        callback_data=f"cancel_booking:{borrow_id}"
                    )
            
            if borrowed:
                text += "–ù–∞ —Ä—É–∫–∞—Ö:\n" + "\n".join(borrowed) + "\n"
            if booked:
                text += "\n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:\n" + "\n".join(booked)
            
            kb.adjust(1)
            await message.answer(text, reply_markup=kb.as_markup())
            
    except Exception as e:
        logging.error(f"Error in show_my_books: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥")

@router.callback_query(F.data.startswith("show_qr_"))
async def show_book_qr(callback: types.CallbackQuery):
    book_id, copy_id = map(int, callback.data.split("_")[2:])
    
    with get_db() as conn:
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT b.title, b.author, bc.id
            FROM books b
            JOIN book_copies bc ON b.id = bc.book_id
            WHERE b.id = ? AND bc.id = ?
        """, (book_id, copy_id))
        book = cursor.fetchone()
        
        if not book:
            await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        qr_data = generate_book_qr(book_id, copy_id)
        
        await callback.message.answer_photo(
            qr_data,
            caption=f"üìö {book[0]}\n‚úçÔ∏è {book[1]}\nID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {book[2]}"
        )

@router.callback_query(F.data.startswith("extend_"))
async def extend_book(callback: types.CallbackQuery):
    borrow_id = int(callback.data.split("_")[1])
    
    with get_db() as conn:
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT return_date, is_extended
            FROM borrowed_books
            WHERE id = ?
        """, (borrow_id,))
        book = cursor.fetchone()
        
        if not book:
            await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if book[1]:
            await callback.answer("–ö–Ω–∏–≥–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑", show_alert=True)
            return
        
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –Ω–∞ 14 –¥–Ω–µ–π
        new_return_date = (datetime.strptime(book[0], "%Y-%m-%d") + timedelta(days=14)).strftime("%Y-%m-%d")
        
        cursor.execute("""
            UPDATE borrowed_books
            SET return_date = ?, is_extended = 1
            WHERE id = ?
        """, (new_return_date, borrow_id))
        
        conn.commit()
        conn.close()
        
        await callback.answer("–°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 14 –¥–Ω–µ–π!", show_alert=True)
        await show_my_books(callback.message)

# –ü–æ–∏—Å–∫ –∫–Ω–∏–≥
@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_title")
    kb.button(text="‚úçÔ∏è –ü–æ –∞–≤—Ç–æ—Ä—É", callback_data="search_by_author")
    kb.button(text="üìö –ü–æ —Ç–µ–º–∞—Ç–∏–∫–µ", callback_data="search_by_theme")
    kb.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("search_by_"))
async def search_type_selected(callback: types.CallbackQuery, state: FSMContext):
    search_type = callback.data.split("_")[2]
    await state.update_data(search_type=search_type)
    
    prompts = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        "author": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:",
        "theme": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–º–∞–Ω, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, —É—á–µ–±–Ω–∏–∫):"
    }
    
    await callback.message.edit_text(prompts[search_type])
    await state.set_state(UserStates.waiting_for_search)

@router.message(UserStates.waiting_for_search)
async def process_search(message: types.Message, page: int = 1, search_query: str = None):
    menu_commands = ['üìö –ö–∞—Ç–∞–ª–æ–≥', 'üîç –ü–æ–∏—Å–∫', 'üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏', '‚ùì –ü–æ–º–æ—â—å','üìù –û—Ç–∑—ã–≤—ã','üìñ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É']
    
    if message.text in menu_commands:
        await state.clear()
        return
    
    with get_db() as conn:
        cursor = conn.cursor()
        
        try:
            search_text = search_query if search_query else message.text
            search_pattern = f'%{search_text}%'
            
            cursor.execute("""
                SELECT COUNT(*)
                FROM books
                WHERE LOWER(title) LIKE ? OR LOWER(author) LIKE ?
            """, (search_pattern, search_pattern))
            
            total_books = cursor.fetchone()[0]
            total_pages = (total_books + BOOKS_PER_PAGE - 1) // BOOKS_PER_PAGE
            
            cursor.execute("""
                SELECT id, title, author, description
                FROM books
                WHERE LOWER(title) LIKE ? OR LOWER(author) LIKE ?
                ORDER BY title
                LIMIT ? OFFSET ?
            """, (search_pattern, search_pattern, BOOKS_PER_PAGE, (page - 1) * BOOKS_PER_PAGE))
            
            books = cursor.fetchall()
            
            if not books:
                await message.answer("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_text}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages})"
            kb = InlineKeyboardBuilder()
            
            for book_id, title, author, description in books:
                kb.button(
                    text=f"{title} - {author}", 
                    callback_data=f"book_info:{book_id}:{search_text}"
                )
            
            nav_buttons = []
            if page > 1:
                nav_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"search:{page-1}:{search_text}"))
            if page < total_pages:
                nav_buttons.append(("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", f"search:{page+1}:{search_text}"))
            
            for btn_text, btn_data in nav_buttons:
                kb.button(text=btn_text, callback_data=btn_data)
            
            kb.adjust(1)
            
            if isinstance(message, types.Message):
                await message.answer(text, reply_markup=kb.as_markup())
            else:
                await message.edit_text(text, reply_markup=kb.as_markup())
            
        except Exception as e:
            logging.error(f"Error in process_search: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥")

@router.callback_query(lambda c: c.data.startswith("search:"))
async def process_search_navigation(callback: types.CallbackQuery):
    try:
        parts = callback.data.split(":")
        page = int(parts[1])
        search_query = parts[2] if len(parts) > 2 else None
        
        await process_search(callback.message, page, search_query)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in search navigation: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

@router.message(F.text == "üìù –û—Ç–∑—ã–≤—ã")
async def reviews_menu(message: types.Message):
    try:
        kb = InlineKeyboardBuilder()
        # kb.button(text="üìñ –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="show_all_reviews")
        kb.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="read_reviews")
        kb.adjust(1)
        
        await message.answer(
            "üìù –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤:\n\n"
            "‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        logging.error(f"Error in reviews_menu: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤")

@router.callback_query(F.data == "show_all_reviews")
async def show_all_reviews(callback: types.CallbackQuery):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT b.title, b.author, br.rating, br.review_text, u.full_name, 
                       strftime('%d.%m.%Y', br.created_at) as review_date
                FROM book_reviews br
                JOIN books b ON br.book_id = b.id
                JOIN users u ON br.user_id = u.id
                WHERE br.status = 'approved' AND br.is_hidden = 0
                ORDER BY br.created_at DESC
                LIMIT 10
            """)
            
            reviews = cursor.fetchall()
            
            if not reviews:
                text = "üòî –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
            else:
                text = "üìö –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n"
                for title, author, rating, review, reviewer, date in reviews:
                    text += (
                        f"üìñ {title} ({author})\n"
                        f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n"
                        f"üë§ {reviewer}\n"
                        f"‚úçÔ∏è {review}\n"
                        f"üìÖ {date}\n\n"
                    )
            
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="read_reviews")
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_reviews")
            kb.adjust(1)
            
            await callback.message.edit_text(text, reply_markup=kb.as_markup())
            
    except Exception as e:
        logging.error(f"Error showing all reviews: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤", show_alert=True)

@router.callback_query(F.data == "back_to_reviews")
async def back_to_reviews_menu(callback: types.CallbackQuery):
    try:
        kb = InlineKeyboardBuilder()
        # kb.button(text="üìñ –ß–∏—Ç–∞—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="show_all_reviews")
        kb.button(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data="read_reviews")
        kb.adjust(1)
        
        await callback.message.edit_text(
            "üìù –ú–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤:\n\n"
            # "‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∞—Ö",
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        logging.error(f"Error in back_to_reviews_menu: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("write_review:"))
async def start_review(callback: types.CallbackQuery, state: FSMContext):
    try:
        book_id = int(callback.data.split(":")[1])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç—É –∫–Ω–∏–≥—É
            cursor.execute("""
                SELECT COUNT(*) FROM borrowed_books 
                WHERE user_id = ? AND book_id = ? AND status = 'returned'
            """, (callback.from_user.id, book_id))
            
            if cursor.fetchone()[0] == 0:
                await callback.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
            cursor.execute("""
                SELECT COUNT(*) FROM book_reviews 
                WHERE user_id = ? AND book_id = ?
            """, (callback.from_user.id, book_id))
            
            if cursor.fetchone()[0] > 0:
                await callback.answer("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç—É –∫–Ω–∏–≥—É", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
            cursor.execute("SELECT title FROM books WHERE id = ?", (book_id,))
            book_title = cursor.fetchone()[0]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(ReviewStates.waiting_for_rating)
            await state.update_data(book_id=book_id, book_title=book_title)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            kb = InlineKeyboardBuilder()
            for i in range(1, 6):
                kb.button(text="‚≠ê" * i, callback_data=f"rating:{i}")
            kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_review")
            kb.adjust(5, 1)
            
            await callback.message.edit_text(
                f"üìö –ö–Ω–∏–≥–∞: {book_title}\n\n"
                "–û—Ü–µ–Ω–∏—Ç–µ –∫–Ω–∏–≥—É –æ—Ç 1 –¥–æ 5 –∑–≤—ë–∑–¥:",
                reply_markup=kb.as_markup()
            )
            
    except Exception as e:
        logging.error(f"Error in start_review: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("rating:"))
async def handle_rating(callback: types.CallbackQuery, state: FSMContext):
    try:
        rating = int(callback.data.split(":")[1])
        data = await state.get_data()
        
        await state.update_data(rating=rating)
        await state.set_state(ReviewStates.waiting_for_text)
        
        await callback.message.edit_text(
            f"üìö –ö–Ω–∏–≥–∞: {data['book_title']}\n"
            f"‚≠ê –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}\n\n"
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ:\n"
            "‚Ä¢ –û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å/–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å\n"
            "‚Ä¢ –ö–æ–º—É –±—ã –≤—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ —ç—Ç—É –∫–Ω–∏–≥—É"
        )
        
    except Exception as e:
        logging.error(f"Error in handle_rating: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(ReviewStates.waiting_for_text)
async def save_review(message: types.Message, state: FSMContext):
    try:
        if len(message.text) < 10:
            await message.answer("‚ùå –û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            return
            
        data = await state.get_data()
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO book_reviews (
                    book_id, user_id, rating, review_text, created_at, status
                ) VALUES (?, ?, ?, ?, datetime('now'), 'pending')
            """, (
                data['book_id'],
                message.from_user.id,
                data['rating'],
                message.text
            ))
            
            conn.commit()
        
        await state.clear()
        await message.answer(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –∫–Ω–∏–≥–µ ¬´{data['book_title']}¬ª!\n"
            "–û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        
    except Exception as e:
        logging.error(f"Error saving review: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞")

@router.callback_query(F.data == "cancel_review")
async def cancel_review(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –ù–∞–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "read_reviews")
async def show_books_for_reviews(callback: types.CallbackQuery):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–Ω—É–ª
            cursor.execute("""
                SELECT DISTINCT b.id, b.title, b.author
                FROM books b
                JOIN borrowed_books bb ON b.id = bb.book_id
                WHERE bb.user_id = ? AND bb.status = 'returned'
                ORDER BY b.title
            """, (callback.from_user.id,))
            
            returned_books = cursor.fetchall()
            
            if not returned_books:
                await callback.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏
            kb = InlineKeyboardBuilder()
            
            for book_id, title, author in returned_books:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
                cursor.execute("""
                    SELECT COUNT(*) FROM book_reviews 
                    WHERE user_id = ? AND book_id = ?
                """, (callback.from_user.id, book_id))
                
                has_review = cursor.fetchone()[0] > 0
                
                if not has_review:
                    kb.button(
                        text=f"üìö {title} ({author})",
                        callback_data=f"write_review:{book_id}"
                    )
            
            kb.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")
            kb.adjust(1)
            
            text = (
                "üìñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤:\n\n"
                "–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤."
            )
            
            if callback.message.text != text:
                await callback.message.edit_text(text, reply_markup=kb.as_markup())
            else:
                await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
                
    except Exception as e:
        logging.error(f"Error in show_books_for_reviews: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥", show_alert=True)

@router.message(F.text == "‚ùì –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def show_instructions(message: types.Message):
    instructions = """
üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–∏–±–ª–∏–æ—Ç–µ—á–Ω–æ–≥–æ –±–æ—Ç–∞:</b>

1Ô∏è‚É£ <b>–ü–æ–∏—Å–∫ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìö –ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥
‚Ä¢ –ö–Ω–æ–ø–∫–∞ üîç –ü–æ–∏—Å–∫ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–∏–≥—É
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –∫–Ω–∏–≥—É" –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

2Ô∏è‚É£ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑—è—Ç—ã–º–∏ –∫–Ω–∏–≥–∞–º–∏:</b>
‚Ä¢ –í —Ä–∞–∑–¥–µ–ª–µ üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤–∞—à–∏ –∫–Ω–∏–≥–∏
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞

3Ô∏è‚É£ <b>–û—Ç–∑—ã–≤—ã:</b>
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã –∏ –æ—Ü–µ–Ω–∫–∏

‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–∏–≥–∏ –Ω–∞ —Ä—É–∫–∞—Ö
‚Ä¢ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ - 14 –¥–Ω–µ–π
‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–Ω–∏–≥–∏ –≤–æ–≤—Ä–µ–º—è!

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üìö
"""
    await message.answer(instructions, parse_mode="HTML")

@router.message(F.text == "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def show_booking_options(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_title")
    kb.button(text="üë§ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", callback_data="search_by_author")
    kb.button(text="üìö –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ", callback_data="search_by_theme")
    kb.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥–∏:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("search_by_"))
async def start_search(callback: types.CallbackQuery, state: FSMContext):
    search_type = callback.data.split("_")[2]
    await state.update_data(search_type=search_type)
    
    prompts = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        "author": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:",
        "theme": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–º–∞–Ω, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, —É—á–µ–±–Ω–∏–∫):"
    }
    
    await callback.message.edit_text(prompts[search_type])
    await state.set_state(UserStates.waiting_for_search)

@router.message(UserStates.waiting_for_search)
async def process_search(message: types.Message, page: int = 1, search_query: str = None):
    menu_commands = ['üìö –ö–∞—Ç–∞–ª–æ–≥', 'üîç –ü–æ–∏—Å–∫', 'üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏', '‚ùì –ü–æ–º–æ—â—å']
    
    if message.text in menu_commands:
        await state.clear() 
        return  
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
    with get_db() as conn:
        cursor = conn.cursor()
        
        try:
            cursor.execute("""
                SELECT COUNT(*)
                FROM books
                WHERE LOWER(title) LIKE ? OR LOWER(author) LIKE ?
            """, (f'%{message.text}%', f'%{message.text}%'))
            
            total_books = cursor.fetchone()[0]
            total_pages = (total_books + BOOKS_PER_PAGE - 1) // BOOKS_PER_PAGE
            
            cursor.execute("""
                SELECT id, title
                FROM books
                WHERE LOWER(title) LIKE ? OR LOWER(author) LIKE ?
                ORDER BY title
                LIMIT ? OFFSET ?
            """, (f'%{message.text}%', f'%{message.text}%', BOOKS_PER_PAGE, (page - 1) * BOOKS_PER_PAGE))
            
            books = cursor.fetchall()
            
            if not books:
                await message.answer(
                    "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                    reply_markup=get_main_keyboard()
                )
                return
            
            text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{message.text}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages})"
            kb = InlineKeyboardBuilder()
            
            for book_id, title in books:
                kb.button(
                    text=title, 
                    callback_data=f"book_info:{book_id}:{message.text}"  
                )
            
            if total_pages > 1:
                nav_buttons = []
                if page > 1:
                    nav_buttons.append(("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", f"search:{page-1}:{message.text}"))
                if page < total_pages:
                    nav_buttons.append(("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", f"search:{page+1}:{message.text}"))
                
                for btn_text, btn_data in nav_buttons:
                    kb.button(text=btn_text, callback_data=btn_data)
            
            kb.button(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")
            
            kb.adjust(1)
            await message.answer(text, reply_markup=kb.as_markup())
            
        except Exception as e:
            logging.error(f"Error in process_search: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )

@router.callback_query(F.data.startswith("back_to_search:"))
async def back_to_search_results(callback: types.CallbackQuery):
    try:
        search_query = callback.data.split(":")[1]
        await callback.message.delete()
        await process_search(callback.message, page=1, search_query=search_query)
    except Exception as e:
        logging.error(f"Error in back_to_search_results: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞", show_alert=True)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–Ω–∏–≥—É")
async def start_book_request(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏]\n"
        "–ê–≤—Ç–æ—Ä: [–∞–≤—Ç–æ—Ä]\n"
        "–ü—Ä–∏—á–∏–Ω–∞: [–ø–æ—á–µ–º—É –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–∞ –∫–Ω–∏–≥–∞ –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ]"
    )
    await UserStates.waiting_for_book_request.set()

@router.message(UserStates.waiting_for_book_request)
async def process_book_request(message: types.Message, state: FSMContext):
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO book_requests (user_id, request_text, status, date)
            VALUES (?, ?, 'pending', ?)
        """, (
            message.from_user.id,
            message.text,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ))
        conn.commit()
        conn.close()
        
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø—Ä–æ—Å! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
        )
        await state.clear()

@router.message(F.text == "üìñ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–Ω–∏–≥—É")
async def suggest_book_start(message: types.Message, state: FSMContext):
    logging.debug(f"Suggest book handler triggered with message: {message.text}")
    
    if not await check_registration(message):
        logging.debug("User not registered")
        return
        
    try:
        logging.debug("Setting state and sending message")
        await state.set_state(SuggestBookStates.waiting_for_title)
        await message.answer(
            "üìö –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –∞–≤—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –í–æ–π–Ω–∞ –∏ –º–∏—Ä - –õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"
        )
        logging.debug("Message sent successfully")
        
    except Exception as e:
        logging.error(f"Error in suggest_book_start: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(SuggestBookStates.waiting_for_title)
async def process_book_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –≥–¥–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: https://example.com/book"
    )
    await state.set_state(SuggestBookStates.waiting_for_url)

@router.message(SuggestBookStates.waiting_for_url)
async def process_book_url(message: types.Message, state: FSMContext):
    if not message.text.startswith(('http://', 'https://')):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://"
        )
        return
        
    await state.update_data(url=message.text)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–Ω–∏–≥–∏ (–≤ —Ä—É–±–ª—è—Ö):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500"
    )
    await state.set_state(SuggestBookStates.waiting_for_price)

@router.message(SuggestBookStates.waiting_for_price)
async def process_book_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
            
        await state.update_data(price=price)
        await message.answer(
            "–û–ø–∏—à–∏—Ç–µ, –ø–æ—á–µ–º—É —ç—Ç—É –∫–Ω–∏–≥—É —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –≠—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∫–Ω–∏–≥–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –º–Ω–æ–≥–∏–º —á–∏—Ç–∞—Ç–µ–ª—è–º"
        )
        await state.set_state(SuggestBookStates.waiting_for_reason)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")

@router.message(SuggestBookStates.waiting_for_reason)
async def process_book_reason(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    with get_db() as conn:
        cursor = conn.cursor()
        
        try:
            cursor.execute("""
                INSERT INTO book_suggestions (
                    user_id, title, url, price, reason, status, created_at
                ) VALUES (?, ?, ?, ?, ?, 'pending', datetime('now'))
            """, (
                message.from_user.id,
                data['title'],
                data['url'],
                data['price'],
                message.text
            ))
            
            conn.commit()
            
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.\n"
                "–ú—ã —É—á—Ç–µ–º –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏."
            )
            
        except Exception as e:
            logging.error(f"Error in process_book_reason: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            conn.close()
            await state.clear() 