import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import get_db, create_book_copies, log_admin_action
from states.admin_states import AdminStates, AdminManageStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import secrets
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from utils.token_storage import add_token, remove_token
import cv2
import numpy as np
from pyzbar.pyzbar import decode
import io
from PIL import Image
import logging

router = Router()

ADMIN_IDS = [6500936622] 

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
async def check_admin(message: types.Message) -> bool:
    try:
        with get_db() as conn:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            cursor = conn.cursor()
            cursor.execute("SELECT role FROM users WHERE id = ?", (message.from_user.id,))
            result = cursor.fetchone()
            return result and result[0] == 'admin'
    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        return False

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
async def admin_filter(message: types.Message):
    return await check_admin(message)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
router.message.filter(admin_filter)

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR"),
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                KeyboardButton(text="üåê –í–µ–±-–ø–∞–Ω–µ–ª—å"),
                KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
            ],
            [
                KeyboardButton(text="‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not await check_admin(message):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    await message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR")
async def scan_qr_command(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="scan_issue")
    kb.button(text="üì• –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É", callback_data="scan_return")
    # kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")
    kb.adjust(2, 1)
    
    await message.answer(
        "üì∑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞:",
        reply_markup=kb.as_markup()
    )

@router.message(F.text == "üåê –í–µ–±-–ø–∞–Ω–µ–ª—å")
async def web_panel(message: types.Message):
    token = secrets.token_urlsafe(32)
    expires = datetime.now() + timedelta(hours=24)  # –¢–æ–∫–µ–Ω –Ω–∞ 24 —á–∞—Å–∞
    
    add_token(token, message.from_user.id, expires)
    
    panel_url = f"http://localhost:8000/login?token={token}"
    
    await message.answer(
        "üåê –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–ø–∞–Ω–µ–ª–∏:\n\n"
        f"üîó {panel_url}\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ:\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞\n"
        "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ—ë —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é\n\n"
        "üîí –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
        disable_web_page_preview=True
    )

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def manage_admins(message: types.Message):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º (ID: 6500936622)
            if message.from_user.id != 6500936622:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
            cursor.execute("""
                SELECT id, username, full_name 
                FROM users 
                WHERE role = 'admin'
                ORDER BY id
            """)
            admins = cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤
            text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for admin_id, username, full_name in admins:
                text += f"‚Ä¢ {full_name or username or admin_id} (ID: {admin_id})\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")
            kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
            kb.adjust(1)
            
            await message.answer(text, reply_markup=kb.as_markup())
            
    except Exception as e:
        logging.error(f"Error in manage_admins: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_users,
                    SUM(CASE WHEN role = 'admin' THEN 1 ELSE 0 END) as admin_count,
                    SUM(CASE WHEN role = 'user' THEN 1 ELSE 0 END) as user_count
                FROM users
            """)
            total_users, admin_count, user_count = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–Ω–∏–≥–∞–º
            cursor.execute("""
                SELECT 
                    COUNT(DISTINCT b.id) as total_books,
                    COUNT(DISTINCT bc.id) as total_copies,
                    COUNT(DISTINCT CASE WHEN bb.status = 'borrowed' THEN bb.id END) as borrowed_books,
                    COUNT(DISTINCT CASE WHEN bb.status = 'booked' THEN bb.id END) as booked_books,
                    COUNT(DISTINCT br.id) as total_reviews
                FROM books b
                LEFT JOIN book_copies bc ON b.id = bc.book_id
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id
                LEFT JOIN book_reviews br ON b.id = br.book_id
            """)
            total_books, total_copies, borrowed_books, booked_books, total_reviews = cursor.fetchone()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            stats_message = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n\n"
                f"üìö –ö–Ω–∏–≥–∏:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∫–Ω–∏–≥: {total_books}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {total_copies}\n"
                f"‚Ä¢ –í—ã–¥–∞–Ω–æ: {borrowed_books}\n"
                f"‚Ä¢ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {booked_books}\n"
                f"‚Ä¢ –û—Ç–∑—ã–≤–æ–≤: {total_reviews}"
            )
            
            await message.answer(stats_message)
            
    except Exception as e:
        logging.error(f"Error showing stats: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(F.text == "‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
async def return_to_user_menu(message: types.Message):
    from handlers.user import get_main_keyboard
    
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "scan_qr")
async def scan_qr_menu(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="scan_issue")
    kb.button(text="üì• –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É", callback_data="scan_return")
    # kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")
    kb.adjust(2, 1)
    
    await callback.message.edit_text(
        "üì∑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞:",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.in_({"scan_issue", "scan_return"}))
async def prepare_for_scan(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data
    await state.update_data(scan_action=action)
    
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é QR-–∫–æ–¥–∞ –∫–Ω–∏–≥–∏.\n\n"
        "–î–ª—è —ç—Ç–æ–≥–æ:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É üìé\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ\n"
        "3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω"
    )
    await state.set_state(AdminStates.waiting_for_qr)
    await callback.answer()

@router.message(AdminStates.waiting_for_qr, F.photo)
async def process_qr_photo(message: types.Message, state: FSMContext):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = await message.bot.get_file(message.photo[-1].file_id)
        photo_bytes = await message.bot.download_file(photo.file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è opencv
        nparr = np.frombuffer(photo_bytes.read(), np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR-–∫–æ–¥
        decoded_objects = decode(image)
        
        if not decoded_objects:
            await message.answer(
                "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "‚Ä¢ QR-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω\n"
                "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑–º—ã—Ç–æ\n"
                "‚Ä¢ QR-–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞–¥—Ä"
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏ –∏–∑ QR-–∫–æ–¥–∞
        book_id = decoded_objects[0].data.decode('utf-8')
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥—É
            cursor.execute("""
                SELECT b.title, b.author, bc.id as copy_id, bc.status,
                       bb.user_id, bb.status as borrow_status,
                       u.full_name, u.username
                FROM books b
                JOIN book_copies bc ON b.id = bc.book_id
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id 
                    AND bb.status = 'booked'
                LEFT JOIN users u ON bb.user_id = u.id
                WHERE bc.id = ?
            """, (book_id,))
            
            book_info = cursor.fetchone()
            if not book_info:
                await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await state.clear()
                return
                
            title, author, copy_id, status, user_id, borrow_status, user_full_name, username = book_info
            display_name = user_full_name or f"@{username}" if user_full_name or username else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            action = data.get('scan_action')
            
            if action == 'scan_issue':
                if not borrow_status or borrow_status != 'booked':
                    await message.answer(
                        "‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.\n"
                        "–í—ã–¥–∞—á–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥."
                    )
                    return
                    
                # –í—ã–¥–∞–µ–º –∫–Ω–∏–≥—É
                return_date = datetime.now() + timedelta(days=14)
                cursor.execute("""
                    UPDATE book_copies 
                    SET status = 'borrowed' 
                    WHERE id = ?
                """, (copy_id,))
                
                cursor.execute("""
                    UPDATE borrowed_books 
                    SET status = 'borrowed',
                        borrow_date = datetime('now', 'localtime'),
                        return_date = datetime(?, 'localtime')
                    WHERE copy_id = ? AND status = 'booked'
                """, (return_date.strftime("%Y-%m-%d %H:%M:%S"), copy_id))
                
                conn.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await message.answer(
                    f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞:\n"
                    f"üìñ {title}\n"
                    f"‚úçÔ∏è {author}\n"
                    f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {display_name}\n"
                    f"üìÖ –í–µ—Ä–Ω—É—Ç—å –¥–æ: {return_date.strftime('%d.%m.%Y')}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await message.bot.send_message(
                        user_id,
                        f"üìö –í–∞–º –≤—ã–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞:\n"
                        f"üìñ {title}\n"
                        f"‚úçÔ∏è {author}\n"
                        f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n\n"
                        f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üòä"
                    )
                except Exception as e:
                    logging.error(f"Error sending notification to user: {e}")
                
            elif action == 'scan_return':
                if status != 'borrowed':
                    await message.answer("‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–∞—è")
                    return
                    
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                cursor.execute("""
                    SELECT u.full_name, u.username, bb.user_id
                    FROM borrowed_books bb
                    JOIN users u ON bb.user_id = u.id
                    WHERE bb.copy_id = ? AND bb.status = 'borrowed'
                    ORDER BY bb.id DESC LIMIT 1
                """, (copy_id,))
                
                user_info = cursor.fetchone()
                if user_info:
                    user_full_name, username, user_id = user_info
                    display_name = user_full_name or f"@{username}"
                else:
                    display_name = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    user_id = None
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–∏–≥—É
                return_date = datetime.now()
                cursor.execute("""
                    UPDATE book_copies 
                    SET status = 'available' 
                    WHERE id = ?
                """, (copy_id,))
                
                cursor.execute("""
                    UPDATE borrowed_books 
                    SET status = 'returned',
                        return_date = datetime('now', 'localtime')
                    WHERE copy_id = ? AND status = 'borrowed'
                """, (copy_id,))
                
                conn.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                await message.answer(
                    f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞:\n"
                    f"üìñ {title}\n"
                    f"‚úçÔ∏è {author}\n"
                    f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {display_name}\n"
                    f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id:
                    try:
                        await message.bot.send_message(
                            user_id,
                            f"üìö –í—ã –≤–µ—Ä–Ω—É–ª–∏ –∫–Ω–∏–≥—É:\n"
                            f"üìñ {title}\n"
                            f"‚úçÔ∏è {author}\n"
                            f"üìÖ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n\n"
                            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π! üòä"
                        )
                    except Exception as e:
                        logging.error(f"Error sending notification to user: {e}")
                
            await state.clear()
                
    except Exception as e:
        logging.error(f"Error processing QR: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞")
        await state.clear()

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        data = await state.get_data()
        book_id = data.get('book_id')
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT b.title, b.author, bc.id as copy_id, bc.status,
                       bb.status as borrow_status, u.full_name, u.username
                FROM books b
                JOIN book_copies bc ON b.id = bc.book_id
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id 
                    AND bb.status = 'borrowed'
                JOIN users u ON u.id = ?
                WHERE bc.id = ?
            """, (user_id, book_id))
            
            book_info = cursor.fetchone()
            if not book_info:
                await message.answer("‚ùå –ö–Ω–∏–≥–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await state.clear()
                return
                
            title, author, copy_id, status, borrow_status, user_full_name, username = book_info
            display_name = user_full_name or f"@{username}"
            
            # –í—ã–¥–∞–µ–º –∫–Ω–∏–≥—É
            return_date = datetime.now() + timedelta(days=14)
            cursor.execute("""
                UPDATE book_copies 
                SET status = 'borrowed' 
                WHERE id = ?
            """, (copy_id,))
            
            cursor.execute("""
                INSERT INTO borrowed_books (user_id, copy_id, borrow_date, return_date, status)
                VALUES (?, ?, datetime('now'), ?, 'borrowed')
            """, (user_id, copy_id, return_date.strftime("%Y-%m-%d")))
            
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await message.answer(
                f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞:\n"
                f"üìñ {title}\n"
                f"‚úçÔ∏è {author}\n"
                f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {display_name}\n"
                f"üìÖ –í–µ—Ä–Ω—É—Ç—å –¥–æ: {return_date.strftime('%d.%m.%Y')}"
            )
            
            try:
                await message.bot.send_message(
                    user_id,
                    f"üìö –í–∞–º –≤—ã–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞:\n"
                    f"üìñ {title}\n"
                    f"‚úçÔ∏è {author}\n"
                    f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n\n"
                    f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üòä"
                )
            except Exception as e:
                logging.error(f"Error sending notification to user: {e}")
            
            await state.clear()
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)")
    except Exception as e:
        logging.error(f"Error processing user ID: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        await state.clear()

@router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminManageStates.waiting_for_new_admin_id)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=InlineKeyboardBuilder().button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
        ).as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            cursor.execute("SELECT role FROM users WHERE id = ?", (callback.from_user.id,))
            user = cursor.fetchone()
            if not user or user[0] != 'admin':
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
            cursor.execute("""
                SELECT id, username, full_name 
                FROM users 
                WHERE role = 'admin' AND id != ?
                ORDER BY full_name, username
            """, (callback.from_user.id,))
            
            admins = cursor.fetchall()
            
            if not admins:
                await callback.answer("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
                return
                
            kb = InlineKeyboardBuilder()
            for admin_id, username, full_name in admins:
                display_name = full_name or username or str(admin_id)
                kb.button(
                    text=f"‚ùå {display_name}", 
                    callback_data=f"confirm_remove_admin:{admin_id}"
                )
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
            kb.adjust(1)
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=kb.as_markup()
            )
            await callback.answer()
            
    except Exception as e:
        logging.error(f"Error in remove_admin_start: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("confirm_remove_admin:"))
async def confirm_remove_admin(callback: types.CallbackQuery):
    try:
        admin_id = int(callback.data.split(":")[1])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            cursor.execute("BEGIN")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                cursor.execute("SELECT role FROM users WHERE id = ?", (callback.from_user.id,))
                user = cursor.fetchone()
                if not user or user[0] != 'admin':
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª—è–µ–º–æ–º –∞–¥–º–∏–Ω–µ
                cursor.execute("""
                    SELECT username, full_name 
                    FROM users 
                    WHERE id = ? AND role = 'admin'
                """, (admin_id,))
                admin = cursor.fetchone()
                
                if not admin:
                    await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                cursor.execute("""
                    UPDATE users 
                    SET role = 'user' 
                    WHERE id = ?
                """, (admin_id,))
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                cursor.execute("""
                    INSERT INTO admin_logs (admin_id, action_type, details, timestamp)
                    VALUES (?, 'remove_admin', ?, datetime('now'))
                """, (
                    callback.from_user.id,
                    f"–£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin[1] or admin[0]} (ID: {admin_id})"
                ))
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                conn.commit()
                
                kb = InlineKeyboardBuilder()
                kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
                
                await callback.message.edit_text(
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    reply_markup=kb.as_markup()
                )
                await callback.answer()
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                cursor.execute("ROLLBACK")
                raise e
                
    except Exception as e:
        logging.error(f"Error in confirm_remove_admin: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)

@router.message(AdminManageStates.waiting_for_new_admin_id)
async def process_new_admin_id(message: types.Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT id, role FROM users WHERE id = ?", (new_admin_id,))
            user = cursor.fetchone()
            
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.",
                    reply_markup=InlineKeyboardBuilder().button(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
                    ).as_markup()
                )
                await state.clear()
                return
                
            if user[1] == 'admin':
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                    reply_markup=InlineKeyboardBuilder().button(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
                    ).as_markup()
                )
                await state.clear()
                return
                
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
            cursor.execute("UPDATE users SET role = 'admin' WHERE id = ?", (new_admin_id,))
            conn.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_admin_action(
                admin_id=message.from_user.id,
                action_type="add_admin",
                details=f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {new_admin_id})"
            )
            
            await message.answer(
                "‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=InlineKeyboardBuilder().button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
                ).as_markup()
            )
            await state.clear()
            
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
            ).as_markup()
        )
    except Exception as e:
        logging.error(f"Error adding new admin: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
            ).as_markup()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

async def get_admin_list() -> list:
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT id, username, full_name 
            FROM users 
            WHERE role = 'admin'
        """)
        return cursor.fetchall()
    finally:
        conn.close()

async def update_user_role(user_id: int, new_role: str) -> bool:
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE users SET role = ? WHERE id = ?", (new_role, user_id))
        conn.commit()
        return True
    except Exception as e:
        logging.error(f"Error updating user role: {e}")
        return False
    finally:
        conn.close()

async def get_book_info(copy_id: str) -> tuple:
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT 
                b.title,
                bb.user_id,
                u.full_name,
                u.username,
                bb.id as borrow_id
            FROM book_copies bc
            JOIN borrowed_books bb ON bc.id = bb.copy_id
            JOIN books b ON bc.book_id = b.id
            JOIN users u ON bb.user_id = u.id
            WHERE bc.id = ? AND bb.status = 'booked'
        """, (copy_id,))
        return cursor.fetchone()
    finally:
        conn.close() 