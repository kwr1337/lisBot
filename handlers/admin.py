import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import get_db, create_book_copies, log_admin_action
from states.admin_states import AdminStates, AdminManageStates, AdminTeacherStates
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta
import secrets
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, ReplyKeyboardRemove
from utils.token_storage import add_token, remove_token
import cv2
import numpy as np
from pyzbar.pyzbar import decode
import io
from PIL import Image
import logging
from functools import wraps
from typing import Callable, Any

router = Router()

ADMIN_IDS = [6500936622] 

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
async def check_admin(message: types.Message) -> bool:
    try:
        with get_db() as conn:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            cursor = conn.cursor()
            cursor.execute("SELECT role FROM users WHERE id = ?", (message.from_user.id,))
            result = cursor.fetchone()
            return result and result[0] == 'admin'
    except Exception as e:
        logging.error(f"Error checking admin status: {e}")
        return False

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
async def admin_filter(message: types.Message):
    return await check_admin(message)

# –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
# router.message.filter(admin_filter)

def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR"),
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            ],
            [
                KeyboardButton(text="üåê –í–µ–±-–ø–∞–Ω–µ–ª—å"),
                KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
            ],
            [
                KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è–º–∏"),
                KeyboardButton(text="‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
            ]
        ],
        resize_keyboard=True
    )
    return keyboard

def admin_required(func: Callable) -> Callable:
    @wraps(func)
    async def wrapper(message: types.Message, *args: Any, **kwargs: Any) -> Any:
        if not await check_admin(message):
            await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        return await func(message, *args, **kwargs)
    return wrapper

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
@router.message(Command("admin"))
@admin_required
async def admin_panel(message: types.Message):
    await message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR")
async def scan_qr_command(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –í—ã–¥–∞—Ç—å –æ–¥–Ω—É –∫–Ω–∏–≥—É", callback_data="scan_issue_new")
    kb.button(text="üì• –í–µ—Ä–Ω—É—Ç—å –æ–¥–Ω—É –∫–Ω–∏–≥—É", callback_data="scan_return")
    kb.button(text="üìö –í—ã–¥–∞—á–∞ —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="mass_issue")
    kb.button(text="üìö –í–æ–∑–≤—Ä–∞—Ç —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="mass_return")
    kb.button(text="üìö –í—ã–¥–∞—Ç—å –±–µ–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="direct_issue")
    kb.adjust(2, 2, 1)
    
    await message.answer(
        "üì∑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "scan_issue_new")
async def start_issue_book(callback: types.CallbackQuery, state: FSMContext):
    try:
        logging.warning(f"DEBUG: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ scan_issue_new —Å—Ä–∞–±–æ—Ç–∞–ª")
        # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        await state.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞
        await state.set_state(AdminStates.waiting_for_single_issue_student)  # <-- –ò–ó–ú–ï–ù–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback.message.answer(
            "1Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID:",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback.answer("–û–∂–∏–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞")
        
    except Exception as e:
        logging.error(f"Error in start_issue_book: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(AdminStates.waiting_for_single_issue_student)
async def process_single_issue_student(message: types.Message, state: FSMContext):
    try:
        student_id = None
        
        if message.photo:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
            photo = await message.bot.get_file(message.photo[-1].file_id)
            photo_bytes = await message.bot.download_file(photo.file_path)
            nparr = np.frombuffer(photo_bytes.read(), np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            decoded_objects = decode(image)
            
            if not decoded_objects:
                await message.answer(
                    "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID —É—á–µ–Ω–∏–∫–∞"
                )
                return
                
            student_id = int(decoded_objects[0].data.decode('utf-8'))
        else:
            try:
                student_id = int(message.text)
            except ValueError:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É—á–µ–Ω–∏–∫–∞")
                return
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT full_name, class 
                FROM users 
                WHERE id = ?
            """, (student_id,))
            
            user = cursor.fetchone()
            if not user:
                await message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            student_name, student_class = user
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
            await state.update_data(student_id=student_id, student_name=student_name)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏
            await state.set_state(AdminStates.waiting_for_single_issue_book)
            
            await message.answer(
                f"2Ô∏è‚É£ –í—ã–±—Ä–∞–Ω —É—á–µ–Ω–∏–∫: {student_name} ({student_class})\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–Ω–∏–≥–∏ –¥–ª—è –≤—ã–¥–∞—á–∏:"
            )
            
    except Exception as e:
        logging.error(f"Error in process_single_issue_student: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

@router.message(AdminStates.waiting_for_single_issue_book)
async def process_single_issue_book(message: types.Message, state: FSMContext):
    try:
        if not message.photo:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∫–Ω–∏–≥–∏")
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞ –∫–Ω–∏–≥–∏
        photo = await message.bot.get_file(message.photo[-1].file_id)
        photo_bytes = await message.bot.download_file(photo.file_path)
        nparr = np.frombuffer(photo_bytes.read(), np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        decoded_objects = decode(image)
        
        if not decoded_objects:
            await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
            
        copy_id = int(decoded_objects[0].data.decode('utf-8').split('.')[0])
        data = await state.get_data()
        student_id = data['student_id']
        student_name = data['student_name']
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT 
                    bc.id,
                    b.id as book_id,
                    b.title,
                    b.author,
                    bc.status,
                    br.id as reservation_id,
                    br.status as reservation_status
                FROM book_copies bc
                JOIN books b ON bc.book_id = b.id
                LEFT JOIN book_reservations br ON b.id = br.book_id 
                    AND br.user_id = ? 
                    AND br.status = 'pending'
                WHERE bc.id = ?
            """, (student_id, copy_id))
            
            book = cursor.fetchone()
            if not book:
                await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            copy_id, book_id, title, author, status, reservation_id, reservation_status = book
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if not reservation_id or reservation_status != 'pending':
                await message.answer(
                    f"‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {student_name}.\n"
                    "–í—ã–¥–∞—á–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥."
                )
                return
            
            if status != 'available':
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–Ω–∏–≥–∏ —É–∂–µ –≤—ã–¥–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
                return
            
            # –í—ã–¥–∞–µ–º –∫–Ω–∏–≥—É
            now = datetime.now()
            return_date = now + timedelta(days=14)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏
            cursor.execute("""
                UPDATE book_copies 
                SET status = 'borrowed' 
                WHERE id = ?
            """, (copy_id,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
            cursor.execute("""
                INSERT INTO borrowed_books (
                    user_id, book_id, copy_id, borrow_date, return_date, status, reservation_id
                ) VALUES (?, ?, ?, ?, ?, 'borrowed', ?)
            """, (student_id, book_id, copy_id, now, return_date, reservation_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            cursor.execute("""
                UPDATE book_reservations 
                SET status = 'fulfilled' 
                WHERE id = ?
            """, (reservation_id,))
            
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.bot.send_message(
                    student_id,
                    f"üìö –í–∞—à–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –≤—ã–¥–∞–Ω–∞:\n\n"
                    f"üìñ {title} - {author}\n"
                    f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n\n"
                    f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üòä"
                )
            except Exception as e:
                logging.error(f"Error sending notification to user: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è
            await message.answer(
                f"‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞:\n\n"
                f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {student_name}\n"
                f"üìñ {title} - {author}\n"
                f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}"
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–∏–≥—É
            kb = InlineKeyboardBuilder()
            kb.button(text="üìö –í—ã–¥–∞—Ç—å –µ—â–µ –∫–Ω–∏–≥—É", callback_data="scan_issue_new")
            kb.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            kb.adjust(1)
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb.as_markup()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
    except Exception as e:
        logging.error(f"Error processing book QR: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–Ω–∏–≥–∏")
        await state.clear()

@router.message(F.text == "üåê –í–µ–±-–ø–∞–Ω–µ–ª—å", admin_filter)
async def web_panel(message: types.Message):
    token = secrets.token_urlsafe(32)
    expires = datetime.now() + timedelta(hours=24)  # –¢–æ–∫–µ–Ω –Ω–∞ 24 —á–∞—Å–∞
    
    add_token(token, message.from_user.id, expires)
    
    panel_url = f"http://localhost:8000/login?token={token}"
    
    await message.answer(
        "üåê –î–æ—Å—Ç—É–ø –∫ –≤–µ–±-–ø–∞–Ω–µ–ª–∏:\n\n"
        f"üîó {panel_url}\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ:\n"
        "‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞\n"
        "‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ—ë —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é\n\n"
        "üîí –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ —Å –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.",
        disable_web_page_preview=True
    )

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
async def manage_admins(message: types.Message):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º (ID: 6500936622)
            if message.from_user.id != 6500936622:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
            cursor.execute("""
                SELECT id, username, full_name 
                FROM users 
                WHERE role = 'admin'
                ORDER BY id
            """)
            admins = cursor.fetchall()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–æ–≤
            text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for admin_id, username, full_name in admins:
                text += f"‚Ä¢ {full_name or username or admin_id} (ID: {admin_id})\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")
            kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
            kb.adjust(1)
            
            await message.answer(text, reply_markup=kb.as_markup())
            
    except Exception as e:
        logging.error(f"Error in manage_admins: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_users,
                    SUM(CASE WHEN role = 'admin' THEN 1 ELSE 0 END) as admin_count,
                    SUM(CASE WHEN role = 'user' THEN 1 ELSE 0 END) as user_count
                FROM users
            """)
            total_users, admin_count, user_count = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–Ω–∏–≥–∞–º
            cursor.execute("""
                SELECT 
                    COUNT(DISTINCT b.id) as total_books,
                    COUNT(DISTINCT bc.id) as total_copies,
                    COUNT(DISTINCT CASE WHEN bb.status = 'borrowed' THEN bb.id END) as borrowed_books,
                    COUNT(DISTINCT CASE WHEN bb.status = 'booked' THEN bb.id END) as booked_books,
                    COUNT(DISTINCT br.id) as total_reviews
                FROM books b
                LEFT JOIN book_copies bc ON b.id = bc.book_id
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id
                LEFT JOIN book_reviews br ON b.id = br.book_id
            """)
            total_books, total_copies, borrowed_books, booked_books, total_reviews = cursor.fetchone()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            stats_message = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n\n"
                f"üìö –ö–Ω–∏–≥–∏:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∫–Ω–∏–≥: {total_books}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {total_copies}\n"
                f"‚Ä¢ –í—ã–¥–∞–Ω–æ: {borrowed_books}\n"
                f"‚Ä¢ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {booked_books}\n"
                f"‚Ä¢ –û—Ç–∑—ã–≤–æ–≤: {total_reviews}"
            )
            
            await message.answer(stats_message)
            
    except Exception as e:
        logging.error(f"Error showing stats: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(F.text == "‚óÄÔ∏è –í—ã–π—Ç–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞")
async def return_to_user_menu(message: types.Message):
    from handlers.user import get_main_keyboard
    
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "scan_qr")
async def scan_qr_menu(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –í—ã–¥–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="scan_issue")
    kb.button(text="üì• –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É", callback_data="scan_return")
    # kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")
    kb.adjust(2, 1)
    
    await callback.message.edit_text(
        "üì∑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞:",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("scan_"))
async def handle_scan_action(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    
    if action == "issue":
        await state.set_state(AdminStates.waiting_for_qr)
        await callback.message.answer(
            "üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å"
        )
    elif action == "return":
        await state.set_state(AdminStates.waiting_for_return_qr)
        await callback.message.answer(
            "üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å"
        )
    
    await callback.answer()

@router.message(AdminStates.waiting_for_qr, F.photo)
async def process_qr_photo(message: types.Message, state: FSMContext):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = await message.bot.get_file(message.photo[-1].file_id)
        photo_bytes = await message.bot.download_file(photo.file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è opencv
        nparr = np.frombuffer(photo_bytes.read(), np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR-–∫–æ–¥
        decoded_objects = decode(image)
        
        if not decoded_objects:
            await message.answer(
                "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "‚Ä¢ QR-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω\n"
                "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑–º—ã—Ç–æ\n"
                "‚Ä¢ QR-–∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –∫–∞–¥—Ä"
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–∑ QR-–∫–æ–¥–∞
        copy_id = int(decoded_objects[0].data.decode('utf-8').split('.')[0])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
            cursor.execute("""
                SELECT 
                    bc.status,
                    b.id as book_id,
                    b.title,
                    b.author,
                    COALESCE(bb.status, 'none') as borrow_status
                FROM book_copies bc
                JOIN books b ON bc.book_id = b.id
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id 
                    AND bb.status = 'borrowed'
                WHERE bc.id = ?
            """, (copy_id,))
            
            copy_info = cursor.fetchone()
            if not copy_info:
                await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            status, book_id, title, author, borrow_status = copy_info
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∫–Ω–∏–≥–∞
            if borrow_status == 'borrowed':
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –≤—ã–¥–∞–Ω —á–∏—Ç–∞—Ç–µ–ª—é\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}"
                )
                return
            
            # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
            cursor.execute("""
                SELECT 
                    r.id as reservation_id,
                    r.user_id,
                    u.full_name,
                    u.username,
                    r.created_at
                FROM book_reservations r
                JOIN users u ON r.user_id = u.id
                WHERE r.book_id = ? 
                AND r.status = 'pending'
                ORDER BY r.created_at ASC
            """, (book_id,))
            
            reservations = cursor.fetchall()
            
            if not reservations:
                await message.answer(
                    f"‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ –∫–Ω–∏–≥—É:\n"
                    f"üìñ {title}\n"
                    f"‚úçÔ∏è {author}"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–ø–∏—Å–∫–æ–º –æ–∂–∏–¥–∞—é—â–∏—Ö
            kb = InlineKeyboardBuilder()
            
            for res_id, user_id, full_name, username, created_at in reservations:
                display_name = full_name or f"@{username}"
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
                    try:
                        created_at_fmt = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S").strftime("%d.%m %H:%M")
                    except ValueError:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏
                        created_at_fmt = datetime.strptime(created_at.split(".")[0], "%Y-%m-%d %H:%M:%S").strftime("%d.%m %H:%M")
                except Exception as e:
                    logging.error(f"Error formatting date: {e}")
                    created_at_fmt = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
                
                kb.button(
                    text=f"{display_name} (–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: {created_at_fmt})",
                    callback_data=f"issue_{copy_id}_{res_id}"
                )
            
            kb.adjust(1)
            
            await state.update_data(book_title=title)
            await message.answer(
                f"üìö –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥–∏:\n"
                f"¬´{title}¬ª - {author}",
                reply_markup=kb.as_markup()
            )
            
    except Exception as e:
        logging.error(f"Error processing QR: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞")
        await state.clear()

@router.callback_query(F.data.startswith("issue_"))
async def issue_book(callback: types.CallbackQuery, state: FSMContext):
    try:
        _, copy_id, reservation_id = callback.data.split("_")
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
            cursor.execute("""
                SELECT 
                    r.user_id,
                    r.book_id,
                    u.full_name,
                    u.username,
                    b.title
                FROM book_reservations r
                JOIN users u ON r.user_id = u.id
                JOIN books b ON r.book_id = b.id
                WHERE r.id = ?
            """, (reservation_id,))
            
            user_id, book_id, full_name, username, book_title = cursor.fetchone()
            display_name = full_name or f"@{username}"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ –∫–Ω–∏–≥–∏
            cursor.execute("""
                INSERT INTO borrowed_books (
                    user_id,
                    book_id,
                    copy_id,
                    reservation_id,
                    borrow_date,
                    return_date,
                    status
                ) VALUES (
                    ?, ?, ?, ?, datetime('now'), datetime('now', '+14 days'), 'borrowed'
                )
            """, (user_id, book_id, copy_id, reservation_id))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            cursor.execute("""
                UPDATE book_reservations 
                SET status = 'fulfilled' 
                WHERE id = ?
            """, (reservation_id,))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            cursor.execute("""
                UPDATE book_copies 
                SET status = 'borrowed' 
                WHERE id = ?
            """, (copy_id,))
            
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è
            await callback.message.edit_text(
                f"‚úÖ –ö–Ω–∏–≥–∞ –≤—ã–¥–∞–Ω–∞:\n"
                f"üìñ {book_title}\n"
                f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {display_name}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback.bot.send_message(
                user_id,
                f"üìö –í–∞—à–∞ –∫–Ω–∏–≥–∞ ¬´{book_title}¬ª –≤—ã–¥–∞–Ω–∞!\n"
                f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: —á–µ—Ä–µ–∑ 14 –¥–Ω–µ–π"
            )
            
            await state.clear()
            
    except Exception as e:
        logging.error(f"Error in issue_book: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–Ω–∏–≥–∏", show_alert=True)

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        data = await state.get_data()
        book_id = data.get('book_id')
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                SELECT b.title, b.author, bc.id as copy_id, bc.status,
                       bb.status as borrow_status, u.full_name, u.username
                FROM books b
                JOIN book_copies bc ON b.id = bc.book_id
                LEFT JOIN borrowed_books bb ON bc.id = bb.copy_id 
                    AND bb.status = 'borrowed'
                JOIN users u ON u.id = ?
                WHERE bc.id = ?
            """, (user_id, book_id))
            
            book_info = cursor.fetchone()
            if not book_info:
                await message.answer("‚ùå –ö–Ω–∏–≥–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await state.clear()
                return
                
            title, author, copy_id, status, borrow_status, user_full_name, username = book_info
            display_name = user_full_name or f"@{username}"
            
            # –í—ã–¥–∞–µ–º –∫–Ω–∏–≥—É
            return_date = datetime.now() + timedelta(days=14)
            cursor.execute("""
                UPDATE book_copies 
                SET status = 'borrowed' 
                WHERE id = ?
            """, (copy_id,))
            
            cursor.execute("""
                INSERT INTO borrowed_books (user_id, copy_id, borrow_date, return_date, status)
                VALUES (?, ?, datetime('now'), ?, 'borrowed')
            """, (user_id, copy_id, return_date.strftime("%Y-%m-%d")))
            
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await message.answer(
                f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞:\n"
                f"üìñ {title}\n"
                f"‚úçÔ∏è {author}\n"
                f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {display_name}\n"
                f"üìÖ –í–µ—Ä–Ω—É—Ç—å –¥–æ: {return_date.strftime('%d.%m.%Y')}"
            )
            
            try:
                await message.bot.send_message(
                    user_id,
                    f"üìö –í–∞–º –≤—ã–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞:\n"
                    f"üìñ {title}\n"
                    f"‚úçÔ∏è {author}\n"
                    f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n\n"
                    f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üòä"
                )
            except Exception as e:
                logging.error(f"Error sending notification to user: {e}")
            
            await state.clear()
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)")
    except Exception as e:
        logging.error(f"Error processing user ID: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        await state.clear()

@router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminManageStates.waiting_for_new_admin_id)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=InlineKeyboardBuilder().button(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
        ).as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: types.CallbackQuery, state: FSMContext):
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            cursor.execute("SELECT role FROM users WHERE id = ?", (callback.from_user.id,))
            user = cursor.fetchone()
            if not user or user[0] != 'admin':
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
            cursor.execute("""
                SELECT id, username, full_name 
                FROM users 
                WHERE role = 'admin' AND id != ?
                ORDER BY full_name, username
            """, (callback.from_user.id,))
            
            admins = cursor.fetchall()
            
            if not admins:
                await callback.answer("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
                return
                
            kb = InlineKeyboardBuilder()
            for admin_id, username, full_name in admins:
                display_name = full_name or username or str(admin_id)
                kb.button(
                    text=f"‚ùå {display_name}", 
                    callback_data=f"confirm_remove_admin:{admin_id}"
                )
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
            kb.adjust(1)
            
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=kb.as_markup()
            )
            await callback.answer()
            
    except Exception as e:
        logging.error(f"Error in remove_admin_start: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("confirm_remove_admin:"))
async def confirm_remove_admin(callback: types.CallbackQuery):
    try:
        admin_id = int(callback.data.split(":")[1])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            cursor.execute("BEGIN")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                cursor.execute("SELECT role FROM users WHERE id = ?", (callback.from_user.id,))
                user = cursor.fetchone()
                if not user or user[0] != 'admin':
                    await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª—è–µ–º–æ–º –∞–¥–º–∏–Ω–µ
                cursor.execute("""
                    SELECT username, full_name 
                    FROM users 
                    WHERE id = ? AND role = 'admin'
                """, (admin_id,))
                admin = cursor.fetchone()
                
                if not admin:
                    await callback.answer("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    return
                
                # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                cursor.execute("""
                    UPDATE users 
                    SET role = 'user' 
                    WHERE id = ?
                """, (admin_id,))
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                cursor.execute("""
                    INSERT INTO admin_logs (admin_id, action_type, details, timestamp)
                    VALUES (?, 'remove_admin', ?, datetime('now'))
                """, (
                    callback.from_user.id,
                    f"–£–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin[1] or admin[0]} (ID: {admin_id})"
                ))
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                conn.commit()
                
                kb = InlineKeyboardBuilder()
                kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
                
                await callback.message.edit_text(
                    f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    reply_markup=kb.as_markup()
                )
                await callback.answer()
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                cursor.execute("ROLLBACK")
                raise e
                
    except Exception as e:
        logging.error(f"Error in confirm_remove_admin: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)

@router.message(AdminManageStates.waiting_for_new_admin_id)
async def process_new_admin_id(message: types.Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("SELECT id, role FROM users WHERE id = ?", (new_admin_id,))
            user = cursor.fetchone()
            
            if not user:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.",
                    reply_markup=InlineKeyboardBuilder().button(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
                    ).as_markup()
                )
                await state.clear()
                return
                
            if user[1] == 'admin':
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                    reply_markup=InlineKeyboardBuilder().button(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
                    ).as_markup()
                )
                await state.clear()
                return
                
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
            cursor.execute("UPDATE users SET role = 'admin' WHERE id = ?", (new_admin_id,))
            conn.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_admin_action(
                admin_id=message.from_user.id,
                action_type="add_admin",
                details=f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {new_admin_id})"
            )
            
            await message.answer(
                "‚úÖ –ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω",
                reply_markup=InlineKeyboardBuilder().button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
                ).as_markup()
            )
            await state.clear()
            
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
            ).as_markup()
        )
    except Exception as e:
        logging.error(f"Error adding new admin: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
            ).as_markup()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

async def get_admin_list() -> list:
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT id, username, full_name 
            FROM users 
            WHERE role = 'admin'
        """)
        return cursor.fetchall()
    finally:
        conn.close()

async def update_user_role(user_id: int, new_role: str) -> bool:
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE users SET role = ? WHERE id = ?", (new_role, user_id))
        conn.commit()
        return True
    except Exception as e:
        logging.error(f"Error updating user role: {e}")
        return False
    finally:
        conn.close()

async def get_book_info(copy_id: str) -> tuple:
    conn = get_db()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT 
                b.title,
                bb.user_id,
                u.full_name,
                u.username,
                bb.id as borrow_id
            FROM book_copies bc
            JOIN borrowed_books bb ON bc.id = bb.copy_id
            JOIN books b ON bc.book_id = b.id
            JOIN users u ON bb.user_id = u.id
            WHERE bc.id = ? AND bb.status = 'booked'
        """, (copy_id,))
        return cursor.fetchone()
    finally:
        conn.close()

@router.message(AdminStates.waiting_for_return_qr)
async def process_return_qr(message: types.Message, state: FSMContext):
    try:
        if not message.photo:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∫–Ω–∏–≥–∏")
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
        photo = await message.bot.get_file(message.photo[-1].file_id)
        photo_bytes = await message.bot.download_file(photo.file_path)
        nparr = np.frombuffer(photo_bytes.read(), np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        decoded_objects = decode(image)
        
        if not decoded_objects:
            await message.answer("‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
            
        copy_id = int(decoded_objects[0].data.decode('utf-8').split('.')[0])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ borrowed_books, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –≤ book_copies
            cursor.execute("""
                SELECT 
                    bb.id as borrow_id,
                    b.title,
                    b.author,
                    u.id as student_id,
                    u.full_name,
                    bc.status as copy_status
                FROM book_copies bc
                JOIN books b ON bc.book_id = b.id
                LEFT JOIN borrowed_books bb ON bb.copy_id = bc.id AND bb.status = 'borrowed'
                LEFT JOIN users u ON bb.user_id = u.id
                WHERE bc.id = ?
            """, (copy_id,))
            
            book = cursor.fetchone()
            if not book:
                await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            borrow_id, title, author, student_id, full_name, copy_status = book
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ –≤—ã–¥–∞—á–µ
            if not borrow_id:
                await message.answer(
                    "‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –Ω–∞ —Ä—É–∫–∞—Ö\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {copy_status}"
                )
                return
            
            display_name = full_name or f"ID:{student_id}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            cursor.execute("""
                UPDATE borrowed_books 
                SET status = 'returned', return_date = datetime('now')
                WHERE id = ?
            """, (borrow_id,))
            
            cursor.execute("""
                UPDATE book_copies 
                SET status = 'available' 
                WHERE id = ?
            """, (copy_id,))
            
            conn.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è
            await message.answer(
                f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞:\n"
                f"üìñ {title}\n"
                f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {display_name}\n"
                f"üìÖ –ë—ã–ª–∞ –≤—ã–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y')}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.bot.send_message(
                    student_id,
                    f"üìö –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏ –∫–Ω–∏–≥—É:\n"
                    f"¬´{title}¬ª\n\n"
                    f"–ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞! üòä"
                )
            except Exception as e:
                logging.error(f"Error sending return notification to user: {e}")
            
            await state.clear()
            
    except Exception as e:
        logging.error(f"Error in process_return_qr: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞")
        await state.clear()

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è–º–∏")
@admin_required
async def manage_teachers(message: types.Message):
    if message.from_user.id != 6500936622:  # ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
        
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è", callback_data="add_teacher")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∏—Ç–µ–ª—è", callback_data="remove_teacher")
    kb.button(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π", callback_data="list_teachers")
    kb.adjust(1)
    
    await message.answer(
        "üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "add_teacher")
async def start_add_teacher(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != 6500936622:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
        
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –±—É–¥—É—â–µ–≥–æ —É—á–∏—Ç–µ–ª—è\n"
        "(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ)"
    )
    await state.set_state(AdminTeacherStates.waiting_for_teacher_id)
    await callback.answer()

@router.message(AdminTeacherStates.waiting_for_teacher_id)
async def process_teacher_id(message: types.Message, state: FSMContext):
    try:
        teacher_id = int(message.text)
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, role FROM users WHERE id = ?
            """, (teacher_id,))
            
            user = cursor.fetchone()
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            if user[1] == 'teacher':
                await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∏—Ç–µ–ª–µ–º")
                return
                
            await state.update_data(teacher_id=teacher_id)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∏—Ç–µ–ª—è:")
            await state.set_state(AdminTeacherStates.waiting_for_teacher_name)
            
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")

@router.message(AdminTeacherStates.waiting_for_teacher_name)
async def process_teacher_name(message: types.Message, state: FSMContext):
    await state.update_data(teacher_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å —É—á–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5–ê):")
    await state.set_state(AdminTeacherStates.waiting_for_teacher_class)

@router.message(AdminTeacherStates.waiting_for_teacher_class)
async def process_teacher_class(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    with get_db() as conn:
        cursor = conn.cursor()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            UPDATE users 
            SET role = 'teacher',
                full_name = ?,
                class = ?
            WHERE id = ?
        """, (data['teacher_name'], message.text, data['teacher_id']))
        
        conn.commit()
        
        await message.answer(
            f"‚úÖ –£—á–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
            f"üë§ {data['teacher_name']}\n"
            f"üìö –ö–ª–∞—Å—Å: {message.text}"
        )
        await state.clear()

@router.callback_query(F.data == "remove_teacher")
async def show_teachers_for_removal(callback: types.CallbackQuery):
    if callback.from_user.id != 6500936622:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
        
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, full_name, class 
            FROM users 
            WHERE role = 'teacher'
            ORDER BY class, full_name
        """)
        
        teachers = cursor.fetchall()
        
        if not teachers:
            await callback.message.edit_text("‚ùå –£—á–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        kb = InlineKeyboardBuilder()
        
        for teacher_id, name, class_name in teachers:
            kb.button(
                text=f"{name} ({class_name})",
                callback_data=f"remove_teacher:{teacher_id}"
            )
            
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_teacher_menu")
        kb.adjust(1)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data.startswith("remove_teacher:"))
async def remove_teacher(callback: types.CallbackQuery):
    if callback.from_user.id != 6500936622:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
        
    teacher_id = int(callback.data.split(":")[1])
    
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE users 
            SET role = 'user',
                class = NULL
            WHERE id = ? AND role = 'teacher'
        """, (teacher_id,))
        
        conn.commit()
        
        await callback.answer("‚úÖ –£—á–∏—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã", show_alert=True)
        await show_teachers_for_removal(callback)

@router.callback_query(F.data == "list_teachers")
async def list_teachers(callback: types.CallbackQuery):
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT full_name, class, 
                   (SELECT COUNT(*) FROM users u2 
                    WHERE u2.class = users.class 
                    AND u2.role = 'user') as students_count
            FROM users 
            WHERE role = 'teacher'
            ORDER BY class, full_name
        """)
        
        teachers = cursor.fetchall()
        
        if not teachers:
            await callback.message.edit_text(
                "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∏—Ç–µ–ª–µ–π",
                reply_markup=InlineKeyboardBuilder().button(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data="back_to_teacher_menu"
                ).as_markup()
            )
            return
            
        text = "üìö –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π:\n\n"
        
        for name, class_name, students in teachers:
            text += f"üë§ {name}\n"
            text += f"üìö –ö–ª–∞—Å—Å: {class_name}\n"
            text += f"üë• –£—á–µ–Ω–∏–∫–æ–≤: {students}\n\n"
            
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_teacher_menu")
        
        await callback.message.edit_text(
            text,
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data == "back_to_teacher_menu")
async def back_to_teacher_menu(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∏—Ç–µ–ª—è", callback_data="add_teacher")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∏—Ç–µ–ª—è", callback_data="remove_teacher")
    kb.button(text="üìã –°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π", callback_data="list_teachers")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—è–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "mass_issue")
async def start_mass_issue(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞
        await state.set_state(AdminStates.waiting_for_student_qr)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback.message.answer(
            "1Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID –¥–ª—è –≤—ã–¥–∞—á–∏ —É—á–µ–±–Ω–∏–∫–æ–≤",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback.answer("–û–∂–∏–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞")
        
    except Exception as e:
        logging.error(f"Error in start_mass_issue: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(AdminStates.waiting_for_student_qr)
async def process_student_qr(message: types.Message, state: FSMContext):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–¥–∞—á–∏ —É—á–µ–±–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_keyboard()
            )
            return
            
        student_id = None
        
        if message.photo:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
            photo = await message.bot.get_file(message.photo[-1].file_id)
            photo_bytes = await message.bot.download_file(photo.file_path)
            nparr = np.frombuffer(photo_bytes.read(), np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            decoded_objects = decode(image)
            
            if not decoded_objects:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
                
                await message.answer(
                    "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
                
            student_id = int(decoded_objects[0].data.decode('utf-8'))
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID
            try:
                student_id = int(message.text)
            except ValueError:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
                
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute("""
                SELECT full_name, class 
                FROM users 
                WHERE id = ?
            """, (student_id,))
            
            user = cursor.fetchone()
            if not user:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
                
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
            
            student_name, student_class = user
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–¥–∞–Ω–Ω—ã—Ö —É—á–µ–±–Ω–∏–∫–æ–≤
            await state.update_data(student_id=student_id, student_name=student_name, issued_books=0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
            kb.adjust(1)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é —É—á–µ–±–Ω–∏–∫–æ–≤
            await message.answer(
                f"2Ô∏è‚É£ –í—ã–±—Ä–∞–Ω —á–∏—Ç–∞—Ç–µ–ª—å: {student_name} ({student_class})\n\n"
                f"–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–µ–±–Ω–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–µ–±–Ω–∏–∫–æ–≤ –ø–æ–¥—Ä—è–¥.\n"
                f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤'",
                reply_markup=kb.as_markup()
            )
            
            await state.set_state(AdminStates.waiting_for_book_qr)
            
    except Exception as e:
        logging.error(f"Error processing student QR: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
            reply_markup=kb.as_markup()
        )

@router.message(AdminStates.waiting_for_book_qr)
async def process_book_qr(message: types.Message, state: FSMContext):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–¥–∞—á–∏ —É—á–µ–±–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_keyboard()
            )
            return
            
        if not message.photo:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
            kb.adjust(1)
            
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —É—á–µ–±–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                reply_markup=kb.as_markup()
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
        photo = await message.bot.get_file(message.photo[-1].file_id)
        photo_bytes = await message.bot.download_file(photo.file_path)
        nparr = np.frombuffer(photo_bytes.read(), np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        decoded_objects = decode(image)
        
        if not decoded_objects:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
            kb.adjust(1)
            
            await message.answer(
                "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                reply_markup=kb.as_markup()
            )
            return
            
        # –ü–æ–ª—É—á–∞–µ–º ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–∑ QR-–∫–æ–¥–∞
        copy_id = int(decoded_objects[0].data.decode('utf-8').split('.')[0])
        data = await state.get_data()
        student_id = data['student_id']
        student_name = data['student_name']
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        scanned_books = data.get('scanned_books', [])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–ø–∏–∏
            cursor.execute("""
                SELECT 
                    bc.id,
                    b.id as book_id,
                    b.title,
                    b.author,
                    bc.status
                FROM book_copies bc
                JOIN books b ON bc.book_id = b.id
                WHERE bc.id = ?
            """, (copy_id,))
            
            book = cursor.fetchone()
            if not book:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
                kb.adjust(1)
                
                await message.answer(
                    "‚ùå –£—á–µ–±–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
                
            copy_id, book_id, title, author, status = book
            
            if status != 'available':
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
                kb.adjust(1)
                
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —É—á–µ–±–Ω–∏–∫ —É–∂–µ –≤—ã–¥–∞–Ω –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É—á–µ–±–Ω–∏–∫ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–µ–±–Ω–∏–∫
            if any(book['copy_id'] == copy_id for book in scanned_books):
                kb = InlineKeyboardBuilder()
                kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
                kb.adjust(1)
                
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —É—á–µ–±–Ω–∏–∫ —É–∂–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É—á–µ–±–Ω–∏–∫ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤—ã–¥–∞—á–∏
            scanned_books.append({
                'copy_id': copy_id,
                'book_id': book_id,
                'title': title,
                'author': author
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
            await state.update_data(scanned_books=scanned_books)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
            kb.adjust(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.answer(
                f"‚úÖ –£—á–µ–±–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–¥–∞—á–∏:\n\n"
                f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {student_name}\n"
                f"üìñ –£—á–µ–±–Ω–∏–∫: {title} - {author}\n"
                f"üìö –í—Å–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É—á–µ–±–Ω–∏–∫–æ–≤: {len(scanned_books)}\n\n"
                f"–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —É—á–µ–±–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤'",
                reply_markup=kb.as_markup()
            )
            
    except Exception as e:
        logging.error(f"Error processing book QR: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–∞—á—É —É—á–µ–±–Ω–∏–∫–æ–≤", callback_data="finish_mass_issue")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_mass_issue")
        kb.adjust(1)
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data == "finish_mass_issue")
async def finish_mass_issue(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        student_id = data.get('student_id')
        student_name = data.get('student_name')
        scanned_books = data.get('scanned_books', [])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–¥–∞–Ω—ã –ª–∏ —É—á–µ–±–Ω–∏–∫–∏
        if not scanned_books:
            await callback.answer("‚ùå –ù–µ –±—ã–ª–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞", show_alert=True)
            return
        
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–µ–º –≤—Å–µ —É—á–µ–±–Ω–∏–∫–∏
        issued_count = 0
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            cursor.execute("BEGIN")
            
            try:
                now = datetime.now()
                return_date = now + timedelta(days=180)  # –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ - 180 –¥–Ω–µ–π (–ø–æ–ª–≥–æ–¥–∞)
                
                for book in scanned_books:
                    copy_id = book['copy_id']
                    book_id = book['book_id']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞
                    cursor.execute("""
                        SELECT status FROM book_copies WHERE id = ?
                    """, (copy_id,))
                    
                    status = cursor.fetchone()
                    if not status or status[0] != 'available':
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–∏–≥—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏
                    cursor.execute("""
                        UPDATE book_copies 
                        SET status = 'borrowed' 
                        WHERE id = ?
                    """, (copy_id,))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
                    cursor.execute("""
                        INSERT INTO borrowed_books (
                            user_id, book_id, copy_id, borrow_date, return_date, status, is_textbook, is_mass_issue
                        ) VALUES (?, ?, ?, ?, ?, 'borrowed', 1, 1)
                    """, (student_id, book_id, copy_id, now, return_date))
                    
                    issued_count += 1
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                conn.commit()
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                cursor.execute("ROLLBACK")
                logging.error(f"Error in transaction: {e}")
                await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —É—á–µ–±–Ω–∏–∫–æ–≤", show_alert=True)
                return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await callback.bot.send_message(
                student_id,
                f"üìö –í–∞–º –≤—ã–¥–∞–Ω—ã —É—á–µ–±–Ω–∏–∫–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: {issued_count} —à—Ç.\n\n"
                f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: —á–µ—Ä–µ–∑ 180 –¥–Ω–µ–π (6 –º–µ—Å—è—Ü–µ–≤)\n\n"
                f"‚ö†Ô∏è –£—á–µ–±–Ω–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —É—á–µ–±–Ω–∏–∫–∏'\n\n"
                f"–•–æ—Ä–æ—à–µ–π —É—á–µ–±—ã! üòä"
                    )
                except Exception as e:
                    logging.error(f"Error sending notification to student: {e}")
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await callback.message.edit_text(
            f"‚úÖ –í—ã–¥–∞—á–∞ —É—á–µ–±–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n"
            f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {student_name}\n"
            f"üìö –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ —É—á–µ–±–Ω–∏–∫–æ–≤: {issued_count}\n\n"
            f"–£—á–µ–±–Ω–∏–∫–∏ –≤—ã–¥–∞–Ω—ã —Å—Ä–æ–∫–æ–º –Ω–∞ 180 –¥–Ω–µ–π (6 –º–µ—Å—è—Ü–µ–≤)"
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–¥–∞—Ç—å —É—á–µ–±–Ω–∏–∫–∏ –¥—Ä—É–≥–æ–º—É —É—á–µ–Ω–∏–∫—É
        kb = InlineKeyboardBuilder()
        kb.button(text="üìö –í—ã–¥–∞—Ç—å —É—á–µ–±–Ω–∏–∫–∏ –¥—Ä—É–≥–æ–º—É —É—á–µ–Ω–∏–∫—É", callback_data="mass_issue")
        kb.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        kb.adjust(1)
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.as_markup()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error in finish_mass_issue: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã–¥–∞—á–∏", show_alert=True)

@router.callback_query(F.data == "cancel_mass_issue")
async def cancel_mass_issue(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–¥–∞—á–∏ —É—á–µ–±–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï callbacks –∏ –º–µ—à–∞–µ—Ç —Ä–∞–±–æ—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
# –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# @router.callback_query()
async def log_all_callbacks(callback: types.CallbackQuery):
    logging.warning(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback: {callback.data}")
    # –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è
    return False 

@router.callback_query(F.data == "direct_issue")
async def start_direct_issue(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞
        await state.set_state(AdminStates.waiting_for_direct_issue_student)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        await callback.message.answer(
            "1Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID:",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        await callback.answer("–û–∂–∏–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞")
        
    except Exception as e:
        logging.error(f"Error in start_direct_issue: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(AdminStates.waiting_for_direct_issue_student)
async def process_direct_issue_student(message: types.Message, state: FSMContext):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_keyboard()
            )
            return
            
        student_id = None
        
        if message.photo:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
            photo = await message.bot.get_file(message.photo[-1].file_id)
            photo_bytes = await message.bot.download_file(photo.file_path)
            nparr = np.frombuffer(photo_bytes.read(), np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            decoded_objects = decode(image)
            
            if not decoded_objects:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
                
                await message.answer(
                    "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
            
            student_id = int(decoded_objects[0].data.decode('utf-8'))
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID
            try:
                student_id = int(message.text)
            except ValueError:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
                
                await message.answer(
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute("""
                SELECT full_name, class
                FROM users
                WHERE id = ?
            """, (student_id,))
            
            user = cursor.fetchone()
            if not user:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
                
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
                
            student_name, student_class = user
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞
            await state.update_data(student_id=student_id, student_name=student_name)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏
            await message.answer(
                f"2Ô∏è‚É£ –í—ã–±—Ä–∞–Ω —á–∏—Ç–∞—Ç–µ–ª—å: {student_name} ({student_class})\n\n"
                f"–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∫–Ω–∏–≥–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:",
                reply_markup=kb.as_markup()
            )
            
            await state.set_state(AdminStates.waiting_for_direct_issue_book)
            
    except Exception as e:
        logging.error(f"Error processing student QR: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
            reply_markup=kb.as_markup()
        )
            
@router.message(AdminStates.waiting_for_direct_issue_book)
async def process_direct_issue_book(message: types.Message, state: FSMContext):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–¥–∞—á–∏ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_keyboard()
            )
            return
            
        if not message.photo:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
            
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ –∫–Ω–∏–≥–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                reply_markup=kb.as_markup()
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
        photo = await message.bot.get_file(message.photo[-1].file_id)
        photo_bytes = await message.bot.download_file(photo.file_path)
        nparr = np.frombuffer(photo_bytes.read(), np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        decoded_objects = decode(image)
        
        if not decoded_objects:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
            
            await message.answer(
                "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                reply_markup=kb.as_markup()
            )
            return
            
        copy_id = int(decoded_objects[0].data.decode('utf-8').split('.')[0])
        data = await state.get_data()
        student_id = data['student_id']
        student_name = data['student_name']
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–ø–∏–∏
            cursor.execute("""
                SELECT 
                    bc.id,
                    b.id as book_id,
                    b.title,
                    b.author,
                    bc.status
                FROM book_copies bc
                JOIN books b ON bc.book_id = b.id
                WHERE bc.id = ?
            """, (copy_id,))
            
            book = cursor.fetchone()
            if not book:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
                
                await message.answer(
                    "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
                
            copy_id, book_id, title, author, status = book
            
            if status != 'available':
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
                kb = InlineKeyboardBuilder()
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
                
                await message.answer(
                    "‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    reply_markup=kb.as_markup()
                )
                return
            
            # –í—ã–¥–∞–µ–º –∫–Ω–∏–≥—É
            now = datetime.now()
            return_date = now + timedelta(days=14)  # –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ - 14 –¥–Ω–µ–π
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏
            cursor.execute("""
                UPDATE book_copies 
                SET status = 'borrowed' 
                WHERE id = ?
            """, (copy_id,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–¥–∞—á–µ
            cursor.execute("""
                INSERT INTO borrowed_books (
                    user_id, book_id, copy_id, borrow_date, return_date, status
                ) VALUES (?, ?, ?, ?, ?, 'borrowed')
            """, (student_id, book_id, copy_id, now, return_date))
            
            conn.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await message.bot.send_message(
                    student_id,
                    f"üìö –í–∞–º –≤—ã–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞:\n\n"
                    f"üìñ {title} - {author}\n\n"
                    f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}\n\n"
                    f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üòä"
                )
            except Exception as e:
                logging.error(f"Error sending notification to student: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.answer(
                f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞:\n\n"
                f"üë§ –ß–∏—Ç–∞—Ç–µ–ª—å: {student_name}\n"
                f"üìñ –ö–Ω–∏–≥–∞: {title} - {author}\n"
                f"üìÖ –°—Ä–æ–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞: {return_date.strftime('%d.%m.%Y')}"
            )
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –∫–Ω–∏–≥—É
            kb = InlineKeyboardBuilder()
            kb.button(text="üìö –í—ã–¥–∞—Ç—å –µ—â–µ –∫–Ω–∏–≥—É", callback_data="direct_issue")
            kb.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            kb.adjust(1)
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=kb.as_markup()
            )
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
        
    except Exception as e:
        logging.error(f"Error processing book QR: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–¥–∞—á—É", callback_data="cancel_direct_issue")
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏",
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data == "mass_return")
async def mass_return(callback: types.CallbackQuery, state: FSMContext):
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
    kb.adjust(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
    await state.update_data(scanned_books=[])
    
    await callback.message.answer(
        "üìö –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã —É—á–µ–±–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å\n\n"
        "–ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É—á–µ–±–Ω–∏–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç'\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç'",
        reply_markup=kb.as_markup()
    )
    
    await state.set_state(AdminStates.waiting_for_mass_return_books)
    await callback.answer()

@router.message(AdminStates.waiting_for_mass_return_books)
async def process_mass_return_books(message: types.Message, state: FSMContext):
    try:
        if not message.photo:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
            kb.adjust(1)
            
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —É—á–µ–±–Ω–∏–∫–∞",
                reply_markup=kb.as_markup()
            )
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞
        photo = await message.bot.get_file(message.photo[-1].file_id)
        photo_bytes = await message.bot.download_file(photo.file_path)
        nparr = np.frombuffer(photo_bytes.read(), np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        decoded_objects = decode(image)
        
        if not decoded_objects:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
            kb.adjust(1)
            
            await message.answer(
                "‚ùå QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=kb.as_markup()
            )
            return
            
        copy_id = int(decoded_objects[0].data.decode('utf-8').split('.')[0])
        
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏
            cursor.execute("""
                SELECT 
                    bc.id,
                    b.title,
                    b.author,
                    bb.id as borrow_id,
                    bb.user_id,
                    u.full_name,
                    bb.status
                FROM book_copies bc
                JOIN books b ON bc.book_id = b.id
                LEFT JOIN borrowed_books bb ON bb.copy_id = bc.id AND bb.status = 'borrowed'
                LEFT JOIN users u ON bb.user_id = u.id
                WHERE bc.id = ?
            """, (copy_id,))
            
            book = cursor.fetchone()
            
            if not book:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                kb = InlineKeyboardBuilder()
                kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
                kb.adjust(1)
                
                await message.answer(
                    "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=kb.as_markup()
                )
                return
                
            copy_id, title, author, borrow_id, user_id, user_name, status = book
            
            if not borrow_id or status != 'borrowed':
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                kb = InlineKeyboardBuilder()
                kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
                kb.adjust(1)
                
                await message.answer(
                    "‚ùå –≠—Ç–∞ –∫–Ω–∏–≥–∞ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω–∞—è",
                    reply_markup=kb.as_markup()
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
            data = await state.get_data()
            scanned_books = data.get('scanned_books', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
            if any(book['copy_id'] == copy_id for book in scanned_books):
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                kb = InlineKeyboardBuilder()
                kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
                kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
                kb.adjust(1)
                
                await message.answer(
                    "‚ùå –≠—Ç–æ—Ç —É—á–µ–±–Ω–∏–∫ —É–∂–µ –±—ã–ª –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω",
                    reply_markup=kb.as_markup()
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ —Å–ø–∏—Å–æ–∫
            scanned_books.append({
                'copy_id': copy_id,
                'borrow_id': borrow_id,
                'title': title,
                'author': author,
                'user_id': user_id,
                'user_name': user_name
            })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(scanned_books=scanned_books)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
            kb.adjust(1)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –£—á–µ–±–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n"
                f"üìñ {title} - {author}\n"
                f"üë§ –ë—ã–ª –≤—ã–¥–∞–Ω: {user_name or f'ID: {user_id}'}\n\n"
                f"üìö –í—Å–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(scanned_books)} —à—Ç.\n\n"
                f"–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —É—á–µ–±–Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç'",
                reply_markup=kb.as_markup()
            )
            
    except Exception as e:
        logging.error(f"Error in process_mass_return_books: {e}")
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="finish_mass_return")
        kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data="cancel_mass_return")
        kb.adjust(1)
        
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞",
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data == "finish_mass_return")
async def finish_mass_return(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        scanned_books = data.get('scanned_books', [])
        
        if not scanned_books:
            await callback.answer("‚ùå –ù–µ –±—ã–ª–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–±–Ω–∏–∫–∞", show_alert=True)
            return
        
        returned_count = 0
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            cursor.execute("BEGIN")
            
            try:
                for book in scanned_books:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏—è
                    cursor.execute("""
                        UPDATE borrowed_books 
                        SET status = 'returned', return_date = datetime('now')
                        WHERE id = ?
                    """, (book['borrow_id'],))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏
                    cursor.execute("""
                        UPDATE book_copies 
                        SET status = 'available' 
                        WHERE id = ?
                    """, (book['copy_id'],))
                
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await callback.bot.send_message(
                            book['user_id'],
                            f"üìö –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∏ —É—á–µ–±–Ω–∏–∫:\n"
                            f"¬´{book['title']}¬ª\n\n"
                            f"–ñ–¥–µ–º –≤–∞—Å —Å–Ω–æ–≤–∞! üòä"
                        )
                    except Exception as e:
                        logging.error(f"Error sending notification to user: {e}")
                    
                    returned_count += 1
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                conn.commit()
                
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                cursor.execute("ROLLBACK")
                logging.error(f"Error in transaction: {e}")
                await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —É—á–µ–±–Ω–∏–∫–æ–≤", show_alert=True)
                return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ –í–æ–∑–≤—Ä–∞—Ç —É—á–µ–±–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
            f"üìö –í—Å–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {returned_count} —à—Ç."
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å —É—á–µ–±–Ω–∏–∫–∏ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        kb = InlineKeyboardBuilder()
        kb.button(text="üìö –ü—Ä–∏–Ω—è—Ç—å —É—á–µ–±–Ω–∏–∫–∏ –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞", callback_data="mass_return")
        kb.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        kb.adjust(1)
        
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.as_markup()
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error in finish_mass_return: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞", show_alert=True)

@router.callback_query(F.data == "cancel_mass_return")
async def cancel_mass_return(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —É—á–µ–±–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer() 