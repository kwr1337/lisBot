from datetime import datetime, timedelta
from database.models import get_db
import asyncio
import logging

async def check_return_dates(bot):
    while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            with get_db() as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —á–µ—Ä–µ–∑ 2 –¥–Ω—è
                two_days_later = (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%d")
                cursor.execute("""
                    SELECT bb.id, bb.user_id, b.title, bb.return_date
                    FROM borrowed_books bb
                    JOIN books b ON bb.book_id = b.id
                    JOIN users u ON bb.user_id = u.id
                    WHERE bb.return_date = ? AND bb.status = 'borrowed'
                """, (two_days_later,))
                
                to_notify = cursor.fetchall()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                for borrow_id, user_id, book_title, return_date in to_notify:
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                            f"–ö–Ω–∏–≥—É ¬´{book_title}¬ª –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —á–µ—Ä–µ–∑ 2 –¥–Ω—è ({return_date})"
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
                cursor.execute("""
                    SELECT bb.id, bb.user_id, b.title
                    FROM borrowed_books bb
                    JOIN books b ON bb.book_id = b.id
                    WHERE bb.status = 'borrowed' 
                    AND bb.return_date < date('now')
                """)
                overdue_books = cursor.fetchall()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ
                for borrow_id, user_id, book_title in overdue_books:
                    try:
                        await bot.send_message(
                            user_id,
                            f"üö® –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
                            f"–í—ã –ø—Ä–æ—Å—Ä–æ—á–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫–Ω–∏–≥–∏ ¬´{book_title}¬ª!\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        
        except Exception as e:
            logging.error(f"Error checking return dates: {e}")
            
        # –ñ–¥–µ–º 24 —á–∞—Å–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(86400)  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞ 